import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { apiFetch } from './api';

interface User {
  email?: string;
  name?: string;
}

interface UserContextType {
  user: User | null;
  loading: boolean;
  error: string;
  logout: () => void;
  refreshProfile: () => Promise<void>;
  clearError: () => void;
}

const UserContext = createContext<UserContextType>({
  user: null,
  loading: true,
  error: '',
  logout: () => {},
  refreshProfile: async () => {},
  clearError: () => {},
});

export const useUser = () => useContext(UserContext);

export const UserProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  // –û–±—ä—è–≤–ª—è–µ–º logout –ü–ï–†–ï–î –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
  const logout = useCallback(async () => {
    try {
      console.log('üö™ Frontend: –ù–∞—á–∏–Ω–∞–µ–º logout...');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
      const response = await apiFetch('/api/auth/logout', {
        method: 'POST'
      });
      
      if (response.ok) {
        console.log('‚úÖ Logout successful on server');
      } else {
        console.warn('‚ö†Ô∏è Server logout failed, but clearing local storage anyway');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Logout API call failed:', error);
    } finally {
      // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      console.log('üßπ Frontend: –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
      setUser(null);
      setError('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞');
      navigate('/login');
    }
  }, [navigate]);

  const clearError = useCallback(() => {
    setError('');
  }, []);

  const fetchProfile = useCallback(async () => {
    setLoading(true);
    setError('');
    try {
      console.log('üîç UserContext: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const res = await apiFetch('/api/auth/me');
      console.log('üîç UserContext: –û—Ç–≤–µ—Ç –æ—Ç API:', res);
      console.log('üîç UserContext: res.ok:', res.ok);
      console.log('üîç UserContext: res.status:', res.status);
      
      if (!res.ok) {
        console.log('‚ùå UserContext: –û—à–∏–±–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å–∞:', res.status);
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
      }
      
      const data = await res.json();
      console.log('üîç UserContext: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data);
      
      // –í–†–ï–ú–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –µ—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ [data, status], –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      const userData = Array.isArray(data) ? data[0] : data;
      console.log('üîç UserContext: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
      setUser(userData);
    } catch (e) {
      console.log('‚ùå UserContext: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', e);
      setUser(null);
      setError('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchProfile().catch(console.error);
  }, [fetchProfile]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
  useEffect(() => {
    const interval = setInterval(async () => {
      const refreshToken = localStorage.getItem('refresh_token');
      if (refreshToken) {
        try {
          const res = await fetch('/api/auth/refresh', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ refresh_token: refreshToken }),
            credentials: 'include'
          });
          if (res.ok) {
            const data = await res.json();
            localStorage.setItem('access_token', data.access_token);
            localStorage.setItem('refresh_token', data.refresh_token);
          } else {
            logout().catch(console.error);
          }
        } catch {
          logout().catch(console.error);
        }
      }
    }, 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç
    return () => clearInterval(interval);
  }, [logout]); // –î–æ–±–∞–≤–ª—è–µ–º logout –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  return (
    <UserContext.Provider value={{ user, loading, error, logout, refreshProfile: fetchProfile, clearError }}>
      {children}
    </UserContext.Provider>
  );
}; 