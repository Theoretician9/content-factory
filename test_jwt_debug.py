#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

import requests
import jwt
import json
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE = "http://92.113.146.148:8000"
JWT_SECRET_API_GATEWAY = "your-jwt-secret"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ API Gateway
JWT_SECRET_INTEGRATION = "super-secret-jwt-key-for-content-factory-2024"  # –ó–Ω–∞—á–µ–Ω–∏–µ –≤ Integration Service

def create_jwt_token(user_id: int, secret: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º"""
    payload = {
        "sub": str(user_id),
        "exp": datetime.utcnow() + timedelta(hours=1)
    }
    return jwt.encode(payload, secret, algorithm="HS256")

def decode_jwt_token(token: str, secret: str) -> dict:
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º"""
    try:
        return jwt.decode(token, secret, algorithms=["HS256"])
    except Exception as e:
        return {"error": str(e)}

def test_jwt_secrets():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–æ–≤...")
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏
    user1_token_api = create_jwt_token(1, JWT_SECRET_API_GATEWAY)
    user1_token_int = create_jwt_token(1, JWT_SECRET_INTEGRATION)
    
    print(f"\nüë§ User 1 token (API Gateway secret): {user1_token_api[:50]}...")
    print(f"üë§ User 1 token (Integration secret): {user1_token_int[:50]}...")
    
    # –¢–µ—Å—Ç 2: –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    print("\nüîç –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:")
    print("API Gateway token —Å API Gateway secret:", decode_jwt_token(user1_token_api, JWT_SECRET_API_GATEWAY))
    print("API Gateway token —Å Integration secret:", decode_jwt_token(user1_token_api, JWT_SECRET_INTEGRATION))
    print("Integration token —Å API Gateway secret:", decode_jwt_token(user1_token_int, JWT_SECRET_API_GATEWAY))
    print("Integration token —Å Integration secret:", decode_jwt_token(user1_token_int, JWT_SECRET_INTEGRATION))

def test_real_login():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    print("\nüö™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞...")
    
    # –õ–æ–≥–∏–Ω–∏–º—Å—è –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    login_data = {
        "username": "test@example.com",
        "password": "testpassword123"
    }
    
    try:
        response = requests.post(f"{API_BASE}/api/auth/login", json=login_data)
        print(f"Login status: {response.status_code}")
        
        if response.status_code == 200:
            token_data = response.json()
            access_token = token_data.get("access_token")
            
            if access_token:
                print(f"Access token –ø–æ–ª—É—á–µ–Ω: {access_token[:50]}...")
                
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏
                print("\nüîç –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:")
                payload_api = decode_jwt_token(access_token, JWT_SECRET_API_GATEWAY)
                payload_int = decode_jwt_token(access_token, JWT_SECRET_INTEGRATION)
                
                print(f"–° API Gateway secret: {payload_api}")
                print(f"–° Integration secret: {payload_int}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Integration Service
                headers = {"Authorization": f"Bearer {access_token}"}
                int_response = requests.get(f"{API_BASE}/api/integrations/telegram/accounts", headers=headers)
                print(f"\n–ó–∞–ø—Ä–æ—Å –∫ Integration Service: {int_response.status_code}")
                if int_response.status_code == 200:
                    accounts = int_response.json()
                    print(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
                    for acc in accounts:
                        print(f"  - Account: {acc.get('id', 'N/A')}, User ID: {acc.get('user_id', 'N/A')}")
                else:
                    print(f"–û—à–∏–±–∫–∞: {int_response.text}")
            else:
                print("Access token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
        else:
            print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_manual_tokens():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ –≤—Ä—É—á–Ω—É—é"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º
    user1_token = create_jwt_token(1, JWT_SECRET_API_GATEWAY)
    user2_token = create_jwt_token(2, JWT_SECRET_API_GATEWAY)
    
    headers1 = {"Authorization": f"Bearer {user1_token}"}
    headers2 = {"Authorization": f"Bearer {user2_token}"}
    
    print(f"\nüë§ User 1 token: {user1_token[:50]}...")
    print(f"üë§ User 2 token: {user2_token[:50]}...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
    try:
        print("\nüìã –ó–∞–ø—Ä–æ—Å—ã –æ—Ç user 1:")
        response1 = requests.get(f"{API_BASE}/api/integrations/telegram/accounts", headers=headers1)
        print(f"Status: {response1.status_code}")
        if response1.status_code == 200:
            accounts1 = response1.json()
            print(f"–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è user 1: {len(accounts1)}")
            for acc in accounts1:
                print(f"  - User ID: {acc.get('user_id', 'N/A')}, Phone: {acc.get('phone', 'N/A')}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response1.text}")
        
        print("\nüìã –ó–∞–ø—Ä–æ—Å—ã –æ—Ç user 2:")
        response2 = requests.get(f"{API_BASE}/api/integrations/telegram/accounts", headers=headers2)
        print(f"Status: {response2.status_code}")
        if response2.status_code == 200:
            accounts2 = response2.json()
            print(f"–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è user 2: {len(accounts2)}")
            for acc in accounts2:
                print(f"  - User ID: {acc.get('user_id', 'N/A')}, Phone: {acc.get('phone', 'N/A')}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response2.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

if __name__ == "__main__":
    test_jwt_secrets()
    test_real_login()
    test_manual_tokens()
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!") 