#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Account Manager
"""

import asyncio
import httpx
import json
from datetime import datetime

async def quick_test_account_manager():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Account Manager"""
    base_url = "http://localhost:8001/api/v1/account-manager"
    
    print("üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Account Manager")
    print("=" * 50)
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        print("1. üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
        try:
            response = await client.get(f"{base_url}/stats/recovery")
            if response.status_code == 200:
                stats = response.json()
                print(f"   ‚úÖ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {stats.get('total_accounts', 0)}")
                print(f"   ‚úÖ –ó–¥–æ—Ä–æ–≤—ã—Ö: {stats.get('healthy_accounts', 0)}")
                print(f"   ‚úÖ –í –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {stats.get('accounts_in_recovery', 0)}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 2. –í—ã–¥–µ–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        print("\n2. üîç –í—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        allocation = None
        try:
            response = await client.post(f"{base_url}/allocate", json={
                "user_id": 1,
                "purpose": "testing",
                "service_name": "test-service",
                "timeout_minutes": 10
            })
            
            if response.status_code == 200:
                allocation = response.json()
                account_id = allocation['account_id']
                phone = allocation.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
                print(f"   ‚úÖ –ê–∫–∫–∞—É–Ω—Ç –≤—ã–¥–µ–ª–µ–Ω: {account_id}")
                print(f"   üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
                print(f"   ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {allocation.get('expires_at')}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è: {response.status_code}")
                print(f"   üìù –û—Ç–≤–µ—Ç: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        if allocation:
            account_id = allocation['account_id']
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∞–∫–∫–∞—É–Ω—Ç–∞
            print(f"\n3. üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}...")
            try:
                response = await client.get(f"{base_url}/health/{account_id}")
                if response.status_code == 200:
                    health = response.json()
                    print(f"   ‚úÖ –ó–¥–æ—Ä–æ–≤: {health.get('is_healthy')}")
                    print(f"   üìä –°—Ç–∞—Ç—É—Å: {health.get('status')}")
                    issues = health.get('issues', [])
                    if issues:
                        print(f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(issues)}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {response.status_code}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limits
            print(f"\n4. ‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limits –¥–ª—è {account_id}...")
            try:
                response = await client.post(f"{base_url}/rate-limit/check/{account_id}", json={
                    "action_type": "invite",
                    "target_channel_id": "@testchannel"
                })
                
                if response.status_code == 200:
                    check_result = response.json()
                    print(f"   ‚úÖ –î–µ–π—Å—Ç–≤–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {check_result.get('allowed')}")
                    
                    checks = check_result.get('checks', {})
                    daily = checks.get('daily', {})
                    if daily:
                        print(f"   üìà –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {daily.get('used')}/{daily.get('limit')} "
                              f"(–æ—Å—Ç–∞–ª–æ—Å—å: {daily.get('remaining')})")
                        
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {response.status_code}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            
            # 5. –ó–∞–ø–∏—Å—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            print(f"\n5. üìù –ó–∞–ø–∏—Å—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è {account_id}...")
            try:
                response = await client.post(f"{base_url}/rate-limit/record/{account_id}", json={
                    "action_type": "invite",
                    "target_channel_id": "@testchannel", 
                    "success": True
                })
                
                if response.status_code == 200:
                    record_result = response.json()
                    print(f"   ‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: {record_result.get('recorded')}")
                    
                    updated_counters = record_result.get('updated_counters', {})
                    if updated_counters:
                        print(f"   üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ: invites_today={updated_counters.get('used_invites_today')}")
                        
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è: {response.status_code}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            
            # 6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–º–∏—Ç–æ–≤
            print(f"\n6. üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è {account_id}...")
            try:
                response = await client.get(f"{base_url}/rate-limit/status/{account_id}")
                if response.status_code == 200:
                    status = response.json()
                    daily_limits = status.get('daily_limits', {})
                    
                    print("   üìà –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã:")
                    for action, limits in daily_limits.items():
                        used = limits.get('used', 0)
                        limit = limits.get('limit', 0)
                        remaining = limits.get('remaining', 0)
                        print(f"      ‚Ä¢ {action}: {used}/{limit} (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining})")
                    
                    per_channel = status.get('per_channel_limits', {})
                    if per_channel:
                        print("   üéØ Per-channel –ª–∏–º–∏—Ç—ã:")
                        for channel, stats in per_channel.items():
                            today = stats.get('used_today', 0)
                            total = stats.get('total_sent', 0) 
                            print(f"      ‚Ä¢ {channel}: —Å–µ–≥–æ–¥–Ω—è={today}, –≤—Å–µ–≥–æ={total}")
                            
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            
            # 7. –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            print(f"\n7. üîì –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}...")
            try:
                response = await client.post(f"{base_url}/release/{account_id}", json={
                    "service_name": "test-service",
                    "usage_stats": {
                        "invites_sent": 1,
                        "messages_sent": 0,
                        "contacts_added": 0,
                        "channels_used": ["@testchannel"],
                        "success": True,
                        "error_type": None,
                        "error_message": None
                    }
                })
                
                if response.status_code == 200:
                    result = response.json()
                    print(f"   ‚úÖ –ê–∫–∫–∞—É–Ω—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω: {result.get('success')}")
                    
                    updated_usage = result.get('updated_usage', {})
                    if updated_usage:
                        print(f"   üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                        print(f"      ‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {updated_usage.get('used_invites_today')}")
                        print(f"      ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {updated_usage.get('used_messages_today')}")
                        
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è: {response.status_code}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("\n" + "=" * 50)
        print("‚úÖ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(quick_test_account_manager())