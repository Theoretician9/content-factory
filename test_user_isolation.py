#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Integration Service.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
"""

import requests
import jwt
import json
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE = "http://92.113.146.148:8000/api/integrations/telegram"
JWT_SECRET = "super-secret-jwt-key-for-content-factory-2024"

def create_jwt_token(user_id: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    payload = {
        "sub": str(user_id),
        "exp": datetime.utcnow() + timedelta(hours=1)
    }
    return jwt.encode(payload, JWT_SECRET, algorithm="HS256")

def test_user_isolation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Integration Service...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –¥–≤—É—Ö —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user1_token = create_jwt_token(1)
    user2_token = create_jwt_token(2)
    user99_token = create_jwt_token(99)
    
    print(f"üë§ User 1 token: {user1_token[:50]}...")
    print(f"üë§ User 2 token: {user2_token[:50]}...")
    print(f"üë§ User 99 token: {user99_token[:50]}...")
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    headers1 = {"Authorization": f"Bearer {user1_token}"}
    headers2 = {"Authorization": f"Bearer {user2_token}"}
    headers99 = {"Authorization": f"Bearer {user99_token}"}
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1
    print("\nüìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1")
    try:
        response1 = requests.get(f"{API_BASE}/accounts", headers=headers1)
        print(f"Status: {response1.status_code}")
        if response1.status_code == 200:
            accounts1 = response1.json()
            print(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è user_id=1: {len(accounts1)}")
            for acc in accounts1:
                print(f"  - Account ID: {acc['id']}, User ID: {acc['user_id']}, Phone: {acc['phone']}")
        else:
            print(f"Error: {response1.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2
    print("\nüìã –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2")
    try:
        response2 = requests.get(f"{API_BASE}/accounts", headers=headers2)
        print(f"Status: {response2.status_code}")
        if response2.status_code == 200:
            accounts2 = response2.json()
            print(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è user_id=2: {len(accounts2)}")
            for acc in accounts2:
                print(f"  - Account ID: {acc['id']}, User ID: {acc['user_id']}, Phone: {acc['phone']}")
        else:
            print(f"Error: {response2.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 99
    print("\nüìã –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 99")
    try:
        response99 = requests.get(f"{API_BASE}/accounts", headers=headers99)
        print(f"Status: {response99.status_code}")
        if response99.status_code == 200:
            accounts99 = response99.json()
            print(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è user_id=99: {len(accounts99)}")
            for acc in accounts99:
                print(f"  - Account ID: {acc['id']}, User ID: {acc['user_id']}, Phone: {acc['phone']}")
        else:
            print(f"Error: {response99.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ auth endpoint
    print("\nüîê –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è user_id –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤")
    for i, (user_id, headers) in enumerate([(1, headers1), (2, headers2), (99, headers99)], 1):
        try:
            response = requests.get(f"{API_BASE}/test-auth", headers=headers)
            print(f"Test {i} - Expected user_id={user_id}, Status: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                extracted_user_id = data.get("authenticated_user_id")
                print(f"  Extracted user_id: {extracted_user_id}")
                if extracted_user_id == user_id:
                    print("  ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                else:
                    print("  ‚ùå –û–®–ò–ë–ö–ê –ò–ó–û–õ–Ø–¶–ò–ò!")
            else:
                print(f"  Error: {response.text}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìä –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    print("–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã - –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π.")
    print("–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç—ã.")

if __name__ == "__main__":
    test_user_isolation() 