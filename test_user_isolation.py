#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Integration Service.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
"""

import requests
import jwt
import json
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE = "http://92.113.146.148:8000/api/integrations/telegram"
JWT_SECRET = "super-secret-jwt-key-for-content-factory-2024"

def create_jwt_token(user_id: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    payload = {
        "sub": str(user_id),
        "exp": datetime.utcnow() + timedelta(hours=1)
    }
    return jwt.encode(payload, JWT_SECRET, algorithm="HS256")

def test_user_isolation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Integration Service...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –¥–≤—É—Ö —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user1_token = create_jwt_token(1)
    user2_token = create_jwt_token(2)
    
    print(f"üë§ User 1 token: {user1_token[:50]}...")
    print(f"üë§ User 2 token: {user2_token[:50]}...")
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    headers1 = {"Authorization": f"Bearer {user1_token}"}
    headers2 = {"Authorization": f"Bearer {user2_token}"}
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1
    print("\nüìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1")
    try:
        response1 = requests.get(f"{API_BASE}/accounts", headers=headers1)
        print(f"Status: {response1.status_code}")
        if response1.status_code == 200:
            accounts1 = response1.json()
            print(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è user_id=1: {len(accounts1)}")
            for acc in accounts1:
                print(f"  - Account ID: {acc['id']}, User ID: {acc['user_id']}, Phone: {acc['phone']}")
        else:
            print(f"Error: {response1.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2
    print("\nüìã –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2")
    try:
        response2 = requests.get(f"{API_BASE}/accounts", headers=headers2)
        print(f"Status: {response2.status_code}")
        if response2.status_code == 200:
            accounts2 = response2.json()
            print(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è user_id=2: {len(accounts2)}")
            for acc in accounts2:
                print(f"  - Account ID: {acc['id']}, User ID: {acc['user_id']}, Phone: {acc['phone']}")
        else:
            print(f"Error: {response2.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å QR –∫–æ–¥ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    print("\nüîí –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    try:
        response_no_auth = requests.get(f"{API_BASE}/qr-code")
        print(f"Status –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: {response_no_auth.status_code}")
        if response_no_auth.status_code == 401:
            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø")
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_no_auth.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ QR –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1
    print("\nüî¢ –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ QR –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1")
    try:
        response_qr = requests.get(f"{API_BASE}/qr-code", headers=headers1)
        print(f"Status: {response_qr.status_code}")
        if response_qr.status_code == 200:
            qr_data = response_qr.json()
            print("‚úÖ QR –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
            print(f"Message: {qr_data.get('message', 'N/A')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è QR –∫–æ–¥–∞: {response_qr.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1
    print("\nüìä –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1")
    try:
        response_logs = requests.get(f"{API_BASE}/logs", headers=headers1)
        print(f"Status: {response_logs.status_code}")
        if response_logs.status_code == 200:
            logs1 = response_logs.json()
            print(f"–ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ–≤ –¥–ª—è user_id=1: {len(logs1)}")
            for log in logs1[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                print(f"  - Log ID: {log['id']}, User ID: {log['user_id']}, Action: {log['action']}")
        else:
            print(f"Error: {response_logs.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_user_isolation() 