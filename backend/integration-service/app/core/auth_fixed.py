from fastapi import HTTPException, Request, status
import jwt
import logging

logger = logging.getLogger(__name__)

# JWT —Å–µ–∫—Ä–µ—Ç (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å docker-compose)
JWT_SECRET = "your-jwt-secret"

class AuthenticationError(HTTPException):
    def __init__(self, detail: str = "Authentication failed"):
        super().__init__(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=detail,
            headers={"WWW-Authenticate": "Bearer"},
        )

async def get_user_id_from_request(request: Request) -> int:
    """
    –ù–∞–¥–µ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - —á–∏—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
    –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ API Gateway proxy.
    """
    # –ü–æ–ª—É—á–∞–µ–º Authorization header –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    auth_header = request.headers.get("authorization") or request.headers.get("Authorization")
    
    if not auth_header:
        logger.error("üö´ Missing Authorization header in request")
        raise AuthenticationError("Authorization header missing")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç Bearer token
    if not auth_header.startswith("Bearer "):
        logger.error(f"üö´ Invalid Authorization header format: {auth_header[:20]}...")
        raise AuthenticationError("Invalid Authorization header format")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω
    token = auth_header[7:]  # –£–±–∏—Ä–∞–µ–º "Bearer "
    logger.info(f"üîç Processing JWT token from request: {token[:30]}...")
    
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º
        payload = jwt.decode(token, JWT_SECRET, algorithms=["HS256"])
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –ø–æ–ª—è 'sub'
        user_id_str = payload.get("sub")
        if not user_id_str:
            logger.warning(f"üö´ JWT token missing 'sub' field: {payload}")
            raise AuthenticationError("Invalid token: missing user ID")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int
        user_id = int(user_id_str)
        logger.info(f"‚úÖ JWT Authentication successful - User ID: {user_id}")
        return user_id
        
    except jwt.ExpiredSignatureError:
        logger.warning("üö´ JWT token expired")
        raise AuthenticationError("Token expired")
    except jwt.InvalidTokenError as e:
        logger.warning(f"üö´ Invalid JWT token: {e}")
        raise AuthenticationError("Invalid token")
    except ValueError:
        logger.warning("üö´ Invalid user_id format in JWT")
        raise AuthenticationError("Invalid token: invalid user ID format")
    except Exception as e:
        logger.error(f"üö´ Authentication error: {e}")
        raise AuthenticationError("Authentication failed")

def get_user_id_sync(request: Request) -> int:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id –∏–∑ –∑–∞–ø—Ä–æ—Å–∞.
    """
    import asyncio
    return asyncio.run(get_user_id_from_request(request)) 