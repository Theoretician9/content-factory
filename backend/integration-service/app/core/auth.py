from fastapi import HTTPException, Depends, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
import jwt
from typing import Optional
import logging
from .config import get_settings

logger = logging.getLogger(__name__)
security = HTTPBearer(auto_error=True)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞

class AuthenticationError(HTTPException):
    def __init__(self, detail: str = "Authentication failed"):
        super().__init__(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=detail,
            headers={"WWW-Authenticate": "Bearer"},
        )

async def get_current_user_id(
    credentials: HTTPAuthorizationCredentials = Depends(security)
) -> int:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints.
    """
    settings = get_settings()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if not credentials:
        logger.error("üö´ Missing Authorization header")
        raise AuthenticationError("Authorization header missing")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
        token = credentials.credentials
        logger.info(f"üîç Processing JWT token: {token[:30]}...")
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
        payload = jwt.decode(
            token, 
            settings.JWT_SECRET_KEY, 
            algorithms=[settings.JWT_ALGORITHM]
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –ø–æ–ª—è 'sub' (subject)
        user_id: str = payload.get("sub")
        if user_id is None:
            logger.warning(f"JWT token missing 'sub' field: {payload}")
            raise AuthenticationError("Invalid token: missing user ID")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int
        try:
            user_id_int = int(user_id)
        except ValueError:
            logger.warning(f"Invalid user_id format in JWT: {user_id}")
            raise AuthenticationError("Invalid token: invalid user ID format")
        
        logger.info(f"üîê JWT Authentication successful - User ID: {user_id_int}, Token payload: {payload}")
        return user_id_int
        
    except jwt.ExpiredSignatureError:
        logger.warning("JWT token expired")
        raise AuthenticationError("Token expired")
    except jwt.InvalidTokenError as e:
        logger.warning(f"Invalid JWT token: {e}")
        raise AuthenticationError("Invalid token")
    except Exception as e:
        logger.error(f"Authentication error: {e}")
        raise AuthenticationError("Authentication failed")

async def get_optional_user_id(
    credentials: Optional[HTTPAuthorizationCredentials] = Depends(security)
) -> Optional[int]:
    """
    –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, –∏–Ω–∞—á–µ None.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π.
    """
    if not credentials:
        return None
    
    try:
        return await get_current_user_id(credentials)
    except AuthenticationError:
        return None 