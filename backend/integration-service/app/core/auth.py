from fastapi import HTTPException, Depends, status, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
import jwt
from typing import Optional
import logging
from .config import get_settings
from jose import JWTError
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from app.core.vault import IntegrationVaultClient
from app.database import get_async_session
from app.models.user import User
import os
import httpx

logger = logging.getLogger(__name__)
security = HTTPBearer(auto_error=False)  # –ù–µ auto_error, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä—É—á–Ω—É—é

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Vault –∫–ª–∏–µ–Ω—Ç–∞
vault_client = IntegrationVaultClient()

API_GATEWAY_URL = os.getenv("API_GATEWAY_URL", "http://api-gateway:8000")

class AuthenticationError(HTTPException):
    def __init__(self, detail: str = "Authentication failed"):
        super().__init__(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=detail,
            headers={"WWW-Authenticate": "Bearer"},
        )

async def get_user_id_by_email_via_api_gateway(email: str) -> int:
    # –õ–æ–≥–∏—Ä—É–µ–º email –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
    logger.info(f"üîç Integration Service: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: '{email}'")
    url = f"{API_GATEWAY_URL}/internal/users/by-email?email={email}"
    async with httpx.AsyncClient() as client:
        resp = await client.get(url, timeout=5)
        if resp.status_code == 200:
            data = resp.json()
            return data["id"]
        elif resp.status_code == 404:
            return None
        else:
            logger.error(f"API Gateway error: {resp.status_code} {resp.text}")
            raise AuthenticationError("User service unavailable")

async def get_current_user_id(
    credentials: HTTPAuthorizationCredentials = Depends(security)
) -> int:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints.
    """
    settings = get_settings()
    if not credentials:
        logger.error("üö´ Missing Authorization header")
        raise AuthenticationError("Authorization header missing")
    try:
        token = credentials.credentials
        logger.info(f"üîç Processing JWT token: {token[:30]}...")
        jwt_secret = settings.JWT_SECRET_KEY
        payload = jwt.decode(token, jwt_secret, algorithms=[settings.JWT_ALGORITHM])
        user_id: str = payload.get("sub")
        if user_id is None:
            logger.warning(f"JWT token missing 'sub' field: {payload}")
            raise AuthenticationError("Invalid token: missing user ID")
        if "@" in user_id:
            user_id_val = await get_user_id_by_email_via_api_gateway(user_id)
            if not user_id_val:
                logger.warning(f"User not found for email: {user_id}")
                raise AuthenticationError("Invalid token: user not found")
            logger.info(f"üîê JWT Authentication successful - User ID: {user_id_val}, Token payload: {payload}")
            return user_id_val
        else:
            user_id_int = int(user_id)
            logger.info(f"üîê JWT Authentication successful - User ID: {user_id_int}, Token payload: {payload}")
            return user_id_int
    except jwt.ExpiredSignatureError:
        logger.warning("JWT token expired")
        raise AuthenticationError("Token expired")
    except jwt.InvalidTokenError as e:
        logger.warning(f"Invalid JWT token: {e}")
        raise AuthenticationError("Invalid token")
    except Exception as e:
        logger.error(f"Authentication error: {e}")
        raise AuthenticationError("Authentication failed")

async def get_user_id_from_request(request: Request) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - —á–∏—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ user_id.
    """
    auth_header = request.headers.get("authorization") or request.headers.get("Authorization")
    if not auth_header:
        logger.error("üö´ Missing Authorization header in request")
        raise AuthenticationError("Authorization header missing")
    if not auth_header.startswith("Bearer "):
        logger.error("üö´ Invalid Authorization header format")
        raise AuthenticationError("Invalid Authorization header format")
    token = auth_header[7:]
    logger.info(f"üîç Processing JWT token from request: {token[:30]}...")
    settings = get_settings()
    try:
        jwt_secret = settings.JWT_SECRET_KEY
        payload = jwt.decode(token, jwt_secret, algorithms=["HS256"])
        user_id_str = payload.get("sub")
        if not user_id_str:
            logger.error(f"üö´ JWT token missing 'sub' field: {payload}")
            raise AuthenticationError("Invalid token: missing user ID")
        logger.info(f"üîç JWT PAYLOAD DEBUG: {payload}")
        logger.info(f"üîç USER_ID DEBUG: '{user_id_str}' (type: {type(user_id_str)})")
        if "@" in user_id_str:
            user_id_val = await get_user_id_by_email_via_api_gateway(user_id_str)
            if not user_id_val:
                logger.error(f"üö´ User not found for email: {user_id_str}")
                raise AuthenticationError("Invalid token: user not found")
            logger.info(f"‚úÖ JWT Authentication successful - User ID: {user_id_val}")
            return user_id_val
        else:
            user_id = int(user_id_str)
            logger.info(f"‚úÖ JWT Authentication successful - User ID: {user_id}")
            return user_id
    except jwt.ExpiredSignatureError:
        logger.error("üö´ JWT token expired")
        raise AuthenticationError("Token expired")
    except jwt.InvalidTokenError as e:
        logger.error(f"üö´ Invalid JWT token: {e}")
        raise AuthenticationError("Invalid token: signature verification failed")
    except ValueError:
        logger.error("üö´ Invalid user_id format in JWT")
        raise AuthenticationError("Invalid token: invalid user ID format")
    except Exception as e:
        logger.error(f"üö´ Authentication error: {e}")
        raise AuthenticationError("Authentication failed")

async def get_optional_user_id(
    credentials: Optional[HTTPAuthorizationCredentials] = Depends(security)
) -> Optional[int]:
    """
    –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, –∏–Ω–∞—á–µ None.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π.
    """
    if not credentials:
        return None
    
    try:
        return await get_current_user_id(credentials)
    except AuthenticationError:
        return None

async def get_user_by_email(email: str, db: AsyncSession) -> Optional[User]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        result = await db.execute(select(User).where(User.email == email))
        user = result.scalar_one_or_none()
        if user:
            logger.info(f"‚úÖ User found by email: {email}")
        else:
            logger.warning(f"‚ö†Ô∏è User not found by email: {email}")
        return user
    except Exception as e:
        logger.error(f"üö´ Error getting user by email: {e}")
        return None

async def get_current_user(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: AsyncSession = Depends(get_async_session)
) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º JWT —Å–µ–∫—Ä–µ—Ç –∏–∑ Vault
        jwt_secret = vault_client.get_secret("jwt_secret")
        if not jwt_secret:
            logger.error("üö´ JWT secret not found in Vault")
            raise AuthenticationError("JWT secret not configured")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        token = credentials.credentials
        logger.info(f"üîç Processing JWT token from request: {token[:20]}...")

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        try:
            payload = jwt.decode(token, jwt_secret, algorithms=["HS256"])
            logger.info(f"üîç JWT PAYLOAD DEBUG: {payload}")
        except JWTError as e:
            logger.error(f"üö´ JWT decode error: {e}")
            raise AuthenticationError("Invalid token")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ —Ç–æ–∫–µ–Ω–∞
        email = payload.get("sub")
        if not email:
            logger.error(f"üö´ JWT token missing 'sub' field: {payload}")
            raise AuthenticationError("Invalid token: missing email")

        logger.info(f"üîç USER_EMAIL DEBUG: '{email}' (type: {type(email)})")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –ø–æ email
        user = await get_user_by_email(email, db)
        if not user:
            logger.error(f"üö´ User not found for email: {email}")
            raise AuthenticationError("Invalid token: user not found")

        logger.info(f"‚úÖ JWT Authentication successful - User ID: {user.id}")
        return user.id

    except AuthenticationError as e:
        logger.error(f"üö´ Authentication error: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=str(e),
            headers={"WWW-Authenticate": "Bearer"},
        )
    except Exception as e:
        logger.error(f"üö´ Unexpected error in get_current_user: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Internal server error",
        ) 