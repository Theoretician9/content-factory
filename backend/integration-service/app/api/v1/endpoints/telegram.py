from fastapi import APIRouter, Depends, HTTPException, status, Query, Request
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List, Optional
from uuid import UUID
import logging
import os

from ....database import get_async_session
from ....services.telegram_service import TelegramService
from ....services.integration_log_service import IntegrationLogService
from ....schemas.telegram import (
    TelegramAuthRequest,
    TelegramConnectResponse,
    TelegramSessionResponse,
    TelegramBotCreate,
    TelegramBotResponse,
    TelegramChannelCreate,
    TelegramChannelResponse,
    SendMessageRequest,
    SendMessageResponse
)
from ....schemas.base import BaseResponse, ErrorResponse, PaginationParams
from ....schemas.integration_logs import IntegrationLogResponse
from ....core.auth import get_user_id_from_request
from ....core.vault import get_vault_client

router = APIRouter()
logger = logging.getLogger(__name__)

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
async def get_telegram_service() -> TelegramService:
    return TelegramService()

async def get_log_service() -> IntegrationLogService:
    return IntegrationLogService()

@router.post("/connect", response_model=TelegramConnectResponse)
async def connect_telegram_account(
    request: Request,
    auth_request: TelegramAuthRequest,
    session: AsyncSession = Depends(get_async_session),
    telegram_service: TelegramService = Depends(get_telegram_service)
):
    """
    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - SMS –∫–æ–¥ (code: str)
    - 2FA –ø–∞—Ä–æ–ª—å (password: str)
    - QR-–∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    """
    try:
        # –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_id = await get_user_id_from_request(request)
        
        result = await telegram_service.connect_account(session, user_id, auth_request)
        return result
    except Exception as e:
        logger.error(f"Error in connect endpoint: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}"
        )

@router.get("/qr-code")
async def get_qr_code(
    request: Request,
    telegram_service: TelegramService = Depends(get_telegram_service)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ QR –∫–æ–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        # –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_id = await get_user_id_from_request(request)
        
        qr_code = await telegram_service.generate_qr_code(user_id)
        return {"qr_code": qr_code, "message": "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –≤ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"}
    except Exception as e:
        logger.error(f"Error generating QR code: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞: {str(e)}"
        )

@router.post("/qr-check", response_model=TelegramConnectResponse)
async def check_qr_authorization(
    request: Request,
    qr_request: Optional[dict] = None,  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π request body
    session: AsyncSession = Depends(get_async_session),
    telegram_service: TelegramService = Depends(get_telegram_service)
):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ QR –∫–æ–¥—É —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 2FA.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ QR: POST /qr-check (–±–µ–∑ body)
    - QR + 2FA –ø–∞—Ä–æ–ª—å: POST /qr-check {"password": "your_2fa_password"}
    """
    try:
        # –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_id = await get_user_id_from_request(request)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ request body –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        password = None
        if qr_request and isinstance(qr_request, dict):
            password = qr_request.get('password')
            if password:
                logger.info(f"üîê QR check with 2FA password for user {user_id}")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ —Å–µ—Ä–≤–∏—Å
        result = await telegram_service.check_qr_authorization(session, user_id, password)
        return result
    except Exception as e:
        logger.error(f"Error checking QR authorization: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
        )

@router.get("/accounts", response_model=List[TelegramSessionResponse])
async def get_telegram_accounts(
    request: Request,
    session: AsyncSession = Depends(get_async_session),
    telegram_service: TelegramService = Depends(get_telegram_service),
    active_only: bool = Query(True, description="–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_id = await get_user_id_from_request(request)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(f"üîç GET /accounts - User ID: {user_id}, active_only: {active_only}")
        sessions = await telegram_service.get_user_sessions(session, user_id, active_only)
        logger.info(f"üìã Found {len(sessions)} sessions for user {user_id}")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –µ—â–µ —Ä–∞–∑
        filtered_sessions = [s for s in sessions if s.user_id == user_id]
        
        logger.info(f"üîí Security check: filtered {len(sessions)} ‚Üí {len(filtered_sessions)} sessions for user {user_id}")
        
        if len(sessions) != len(filtered_sessions):
            logger.error(f"üö® SECURITY BREACH: Found sessions with wrong user_id for requesting user {user_id}!")
            for s in sessions:
                if s.user_id != user_id:
                    logger.error(f"üö® Wrong session: {s.id} has user_id={s.user_id}, expected {user_id}")
        
        result = [
            TelegramSessionResponse(
                id=s.id,
                created_at=s.created_at,
                updated_at=s.updated_at,
                user_id=s.user_id,
                phone=s.phone,
                session_metadata=s.session_metadata,
                is_active=s.is_active
            )
            for s in filtered_sessions  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        ]
        
        # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for r in result:
            logger.info(f"üì± Returning session {r.id} with user_id={r.user_id} for requesting user {user_id}")
        
        return result
    except Exception as e:
        logger.error(f"Error getting accounts: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}"
        )

@router.get("/accounts/{session_id}", response_model=TelegramSessionResponse)
async def get_telegram_account(
    request: Request,
    session_id: UUID,
    session: AsyncSession = Depends(get_async_session),
    telegram_service: TelegramService = Depends(get_telegram_service)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º Telegram –∞–∫–∫–∞—É–Ω—Ç–µ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_id = await get_user_id_from_request(request)
        
        telegram_session = await telegram_service.session_service.get_by_id(session, session_id)
        
        if not telegram_session or telegram_session.user_id != user_id:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        return TelegramSessionResponse(
            id=telegram_session.id,
            created_at=telegram_session.created_at,
            updated_at=telegram_session.updated_at,
            user_id=telegram_session.user_id,
            phone=telegram_session.phone,
            session_metadata=telegram_session.session_metadata,
            is_active=telegram_session.is_active
        )
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting account: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}"
        )

@router.delete("/accounts/{session_id}", response_model=BaseResponse)
async def disconnect_telegram_account(
    request: Request,
    session_id: UUID,
    session: AsyncSession = Depends(get_async_session),
    telegram_service: TelegramService = Depends(get_telegram_service)
):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_id = await get_user_id_from_request(request)
        
        success = await telegram_service.disconnect_session(session, user_id, session_id)
        
        if not success:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω"
            )
        
        return BaseResponse(message="–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error disconnecting account: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}"
        )

@router.post("/accounts/{session_id}/reconnect", response_model=BaseResponse)
async def reconnect_telegram_account(
    request: Request,
    session_id: UUID,
    session: AsyncSession = Depends(get_async_session),
    telegram_service: TelegramService = Depends(get_telegram_service)
):
    """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_id = await get_user_id_from_request(request)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        telegram_session = await telegram_service.session_service.get_by_id(session, session_id)
        
        if not telegram_session or telegram_session.user_id != user_id:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        await telegram_service.session_service.update(
            session, session_id, {"is_active": True}
        )
        
        return BaseResponse(message="–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω")
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error reconnecting account: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}"
        )

@router.get("/test-auth")
async def test_auth(request: Request):
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        # –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_id = await get_user_id_from_request(request)
        
        logger.info(f"üîê TEST-AUTH: Successfully authenticated user_id = {user_id}")
        return {"authenticated_user_id": user_id, "message": "Authentication working!"}
    except Exception as e:
        logger.error(f"üö® TEST-AUTH ERROR: {e}")
        return {"error": str(e), "message": "Authentication failed"}

@router.get("/test-public")
async def test_public():
    """–ü—É–±–ª–∏—á–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "ok", "message": "Integration Service is working!", "service": "integration-service"}

@router.get("/logs", response_model=List[IntegrationLogResponse])
async def get_integration_logs(
    request: Request,
    session: AsyncSession = Depends(get_async_session),
    log_service: IntegrationLogService = Depends(get_log_service),
    integration_type: Optional[str] = Query("telegram", description="–¢–∏–ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"),
    log_status: Optional[str] = Query(None, description="–°—Ç–∞—Ç—É—Å: success, error, pending"),
    days_back: int = Query(30, ge=1, le=365, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥"),
    pagination: PaginationParams = Depends()
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–∑–æ–ª—è—Ü–∏–µ–π"""
    try:
        # –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_id = await get_user_id_from_request(request)
        
        offset = (pagination.page - 1) * pagination.size
        
        logs = await log_service.get_user_logs(
            session=session,
            user_id=user_id,
            integration_type=integration_type,
            status=log_status,
            days_back=days_back,
            offset=offset,
            limit=pagination.size
        )
        
        return [
            IntegrationLogResponse(
                id=log.id,
                created_at=log.created_at,
                updated_at=log.updated_at,
                user_id=log.user_id,
                integration_type=log.integration_type,
                action=log.action,
                status=log.status,
                details=log.details,
                error_message=log.error_message
            )
            for log in logs
        ]
    except Exception as e:
        logger.error(f"Error getting logs: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}"
        )

@router.get("/stats/errors")
async def get_error_stats(
    request: Request,
    session: AsyncSession = Depends(get_async_session),
    log_service: IntegrationLogService = Depends(get_log_service),
    days_back: int = Query(7, ge=1, le=30, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–∑–æ–ª—è—Ü–∏–µ–π"""
    try:
        # –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_id = await get_user_id_from_request(request)
        
        stats = await log_service.get_error_stats(
            session=session,
            user_id=user_id,
            integration_type="telegram",
            days_back=days_back
        )
        
        return stats
    except Exception as e:
        logger.error(f"Error getting error stats: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        )

# Internal endpoint for parsing-service (no auth required)
@router.get("/internal/active-accounts")
async def get_active_accounts_internal(
    session: AsyncSession = Depends(get_async_session),
    telegram_service: TelegramService = Depends(get_telegram_service)
):
    """
    Internal endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è parsing-service –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞.
    –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò - —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤!
    """
    try:
        logger.info("üîß Internal request: getting all active Telegram accounts with full credentials for parsing service")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        all_sessions = await telegram_service.session_service.get_all_active(session)
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ Vault
        vault_client = get_vault_client()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º Telegram API –∫–ª—é—á–∏ –∏–∑ Vault
            logger.info("üîë Trying to get Telegram API credentials from Vault...")
            telegram_config = vault_client.get_secret("integration-service")
            logger.info(f"üîë Vault response: {telegram_config}")
            api_id = telegram_config.get('telegram_api_id')
            api_hash = telegram_config.get('telegram_api_hash')
            logger.info(f"üîë Got from Vault: api_id={api_id}, api_hash={'***' if api_hash else None}")
        except Exception as e:
            logger.error(f"‚ùå Vault error, using fallback credentials: {e}")
            # Fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            api_id = os.getenv('TELEGRAM_API_ID')
            api_hash = os.getenv('TELEGRAM_API_HASH')
            logger.info(f"üîë Got from ENV: api_id={api_id}, api_hash={'***' if api_hash else None}")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è credentials
        logger.info(f"üîç FINAL CREDENTIALS CHECK: api_id={api_id}, api_hash={'***' if api_hash else None}")
        
        if not api_id or not api_hash:
            logger.error(f"‚ùå CRITICAL: Missing API credentials! api_id={api_id}, api_hash={api_hash}")
        
        result = []
        for s in all_sessions:
            try:
                # Session –¥–∞–Ω–Ω—ã–µ –±–µ—Ä–µ–º –∏–∑ –ë–î, –∞ –Ω–µ –∏–∑ Vault!
                session_data = s.session_data if hasattr(s, 'session_data') and s.session_data else None
                
                account_data = {
                    "id": str(s.id),
                    "user_id": s.user_id,
                    "phone": s.phone,
                    "is_active": s.is_active,
                    "created_at": s.created_at.isoformat() if s.created_at else None,
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    "api_id": api_id,
                    "api_hash": api_hash,
                    "session_id": str(s.id),
                    "session_data": session_data,  # Session –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                    "connection_ready": session_data is not None
                }
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –≤ parsing-service
                logger.info(f"üì§ Account {s.id}: api_id={account_data['api_id']}, api_hash={'***' if account_data['api_hash'] else None}, has_session_data={account_data['connection_ready']}")
                
                result.append(account_data)
                
            except Exception as account_error:
                logger.error(f"‚ùå Error processing account {s.id}: {account_error}")
                continue
        
        logger.info(f"üîß Returning {len(result)} active accounts with full credentials for parsing service")
        logger.info(f"üìä Accounts with session data: {len([a for a in result if a['connection_ready']])}")
        
        return result
        
    except Exception as e:
        logger.error(f"Error getting active accounts for parsing service: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}"
        ) 