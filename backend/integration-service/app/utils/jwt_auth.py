from fastapi import HTTPException, Request, status
import jwt
import logging

logger = logging.getLogger(__name__)

# JWT —Å–µ–∫—Ä–µ—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
JWT_SECRETS = [
    "your-jwt-secret",  # API Gateway / –æ—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    "super-secret-jwt-key-for-content-factory-2024",  # Integration Service
]

class AuthenticationError(HTTPException):
    def __init__(self, detail: str = "Authentication failed"):
        super().__init__(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=detail,
            headers={"WWW-Authenticate": "Bearer"},
        )

def extract_user_id_from_request(request: Request) -> int:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ –≤—Å–µ—Ö endpoints.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ JWT —Å–µ–∫—Ä–µ—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    """
    # –ü–æ–ª—É—á–∞–µ–º Authorization header
    auth_header = request.headers.get("authorization") or request.headers.get("Authorization")
    
    if not auth_header:
        logger.error("üö´ Missing Authorization header")
        raise AuthenticationError("Authorization header missing")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç Bearer token
    if not auth_header.startswith("Bearer "):
        logger.error(f"üö´ Invalid Authorization header format: {auth_header[:20]}...")
        raise AuthenticationError("Invalid Authorization header format")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω
    token = auth_header[7:]  # –£–±–∏—Ä–∞–µ–º "Bearer "
    logger.info(f"üîç Processing JWT token: {token[:30]}...")
    
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ JWT —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        payload = None
        used_secret = None
        last_error = None
        
        for secret in JWT_SECRETS:
            try:
                payload = jwt.decode(token, secret, algorithms=["HS256"])
                used_secret = secret
                logger.info(f"‚úÖ JWT decoded successfully with secret: {secret[:15]}...")
                break
            except jwt.ExpiredSignatureError as e:
                logger.warning(f"üö´ JWT token expired with secret {secret[:15]}...")
                last_error = e
                continue
            except jwt.InvalidTokenError as e:
                logger.warning(f"üö´ JWT invalid with secret {secret[:15]}...: {e}")
                last_error = e
                continue
        
        if not payload:
            logger.error(f"üö´ JWT token failed verification with all secrets")
            if isinstance(last_error, jwt.ExpiredSignatureError):
                raise AuthenticationError("Token expired")
            else:
                raise AuthenticationError("Invalid token: signature verification failed")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –ø–æ–ª—è 'sub'
        user_id_str = payload.get("sub")
        if not user_id_str:
            logger.warning(f"üö´ JWT token missing 'sub' field: {payload}")
            raise AuthenticationError("Invalid token: missing user ID")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int
        user_id = int(user_id_str)
        logger.info(f"‚úÖ JWT Authentication successful - User ID: {user_id}, Secret: {used_secret[:15]}...")
        return user_id
        
    except AuthenticationError:
        raise
    except ValueError:
        logger.warning("üö´ Invalid user_id format in JWT")
        raise AuthenticationError("Invalid token: invalid user ID format")
    except Exception as e:
        logger.error(f"üö´ Authentication error: {e}")
        raise AuthenticationError("Authentication failed") 