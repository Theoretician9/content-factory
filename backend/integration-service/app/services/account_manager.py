"""
Account Manager Service
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
"""
import logging
import asyncio
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta, timezone
from uuid import UUID
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, and_, or_, func
from sqlalchemy.orm import selectinload
import redis
import json
import re

from ..models.telegram_sessions import TelegramSession
from ..models.account_manager_types import (
    AccountStatus, ActionType, AccountPurpose, ErrorType,
    AccountLimits, AccountUsageStats, TelegramAccountAllocation,
    AccountErrorResult, FloodWaitInfo, AccountHealthStatus
)
from ..core.config import get_settings
from .integration_log_service import IntegrationLogService

logger = logging.getLogger(__name__)

class AccountManagerService:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        self.settings = get_settings()
        self.log_service = IntegrationLogService()
        
        # Redis –¥–ª—è distributed locks
        self.redis_client = redis.Redis(
            host=self.settings.REDIS_HOST,
            port=self.settings.REDIS_PORT,
            db=self.settings.REDIS_DB + 1,  # –û—Ç–¥–µ–ª—å–Ω–∞—è DB –¥–ª—è Account Manager
            decode_responses=True
        )
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_limits = AccountLimits()
        
        # Timeout –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–º–∏–Ω—É—Ç—ã)
        self.default_lock_timeout = 30
    
    async def allocate_account(
        self,
        session: AsyncSession,
        user_id: int,
        purpose: AccountPurpose,
        service_name: str = "unknown",
        preferred_account_id: Optional[UUID] = None,
        timeout_minutes: int = None
    ) -> Optional[TelegramAccountAllocation]:
        """
        –í—ã–¥–µ–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º
        
        Args:
            session: Database session
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            purpose: –¶–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
            service_name: –ò–º—è —Å–µ—Ä–≤–∏—Å–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç
            preferred_account_id: –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
            timeout_minutes: –¢–∞–π–º–∞—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        
        Returns:
            TelegramAccountAllocation –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        """
        try:
            logger.info(f"üîç Allocating account for user {user_id}, purpose: {purpose}, service: {service_name}")
            
            timeout_minutes = timeout_minutes or self.default_lock_timeout
            expires_at = datetime.now(timezone.utc) + timedelta(minutes=timeout_minutes)
            
            # 1. –ù–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            available_accounts = await self._find_available_accounts(
                session, user_id, purpose, preferred_account_id
            )
            
            if not available_accounts:
                logger.warning(f"‚ùå No available accounts for user {user_id}, purpose: {purpose}")
                return None
            
            # 2. –í—ã–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            selected_account = await self._select_optimal_account(available_accounts, purpose)
            
            # 3. –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å distributed lock
            lock_acquired = await self._acquire_account_lock(
                selected_account.id, service_name, timeout_minutes
            )
            
            if not lock_acquired:
                logger.warning(f"‚ùå Failed to acquire lock for account {selected_account.id}")
                return None
            
            # 4. –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è locked –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - —Ç–æ–ª—å–∫–æ Redis locks!
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
            await session.execute(
                update(TelegramSession)
                .where(TelegramSession.id == selected_account.id)
                .values(
                    last_used_at=datetime.now(timezone.utc)
                )
            )
            await session.commit()
            
            # 5. –°–æ–∑–¥–∞—Ç—å allocation –æ–±—ä–µ–∫—Ç
            allocation = TelegramAccountAllocation(
                account_id=selected_account.id,
                user_id=selected_account.user_id,
                phone=selected_account.phone,
                session_data=selected_account.session_data,
                allocated_at=datetime.now(timezone.utc),
                allocated_by=service_name,
                purpose=purpose,
                expires_at=expires_at,
                limits=self.default_limits,
                current_usage={
                    'invites_today': selected_account.used_invites_today,
                    'messages_today': selected_account.used_messages_today,
                    'contacts_today': selected_account.contacts_today
                }
            )
            
            # 6. –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
            await self.log_service.log_integration_action(
                session=session,
                user_id=user_id,
                integration_type="telegram",
                action="account_allocated",
                status="success",
                details={
                    "account_id": str(selected_account.id),
                    "phone": selected_account.phone,
                    "purpose": purpose,
                    "service": service_name,
                    "expires_at": expires_at.isoformat()
                }
            )
            
            logger.info(f"‚úÖ Account {selected_account.id} allocated to {service_name} for {timeout_minutes} minutes")
            return allocation
            
        except Exception as e:
            logger.error(f"‚ùå Error allocating account: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –æ—Å–≤–æ–±–æ–¥–∏—Ç—å lock –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if 'selected_account' in locals():
                await self._release_account_lock(selected_account.id, service_name)
            raise
    
    async def release_account(
        self,
        session: AsyncSession,
        account_id: UUID,
        service_name: str,
        usage_stats: AccountUsageStats
    ) -> bool:
        """
        –û—Å–≤–æ–±–æ–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        Args:
            session: Database session
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            service_name: –ò–º—è —Å–µ—Ä–≤–∏—Å–∞
            usage_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üîì Releasing account {account_id} from {service_name}")
            
            # 1. –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
            result = await session.execute(
                select(TelegramSession).where(TelegramSession.id == account_id)
            )
            account = result.scalar_one_or_none()
            
            if not account:
                logger.error(f"‚ùå Account {account_id} not found")
                return False
            
            # 2. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ù–ï —Ç—Ä–æ–≥–∞–µ–º locked –ø–æ–ª—è!)
            new_values = {
                'last_used_at': datetime.now(timezone.utc)
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if usage_stats.invites_sent > 0:
                new_values['used_invites_today'] = account.used_invites_today + usage_stats.invites_sent
            
            if usage_stats.messages_sent > 0:
                new_values['used_messages_today'] = account.used_messages_today + usage_stats.messages_sent
            
            if usage_stats.contacts_added > 0:
                new_values['contacts_today'] = account.contacts_today + usage_stats.contacts_added
            
            # –û–±–Ω–æ–≤–ª—è–µ–º per-channel —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if usage_stats.channels_used:
                current_per_channel = account.per_channel_invites or {}
                for channel_id in usage_stats.channels_used:
                    if channel_id not in current_per_channel:
                        current_per_channel[channel_id] = {'today': 0, 'total': 0}
                    
                    current_per_channel[channel_id]['today'] += usage_stats.invites_sent
                    current_per_channel[channel_id]['total'] += usage_stats.invites_sent
                
                new_values['per_channel_invites'] = current_per_channel
            
            # 3. –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–µ
            if not usage_stats.success and usage_stats.error_type:
                error_result = await self.handle_account_error(
                    session, account_id, usage_stats.error_type, 
                    usage_stats.error_message or "Unknown error",
                    {'service': service_name}
                )
                
                # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
                if error_result:
                    new_values['status'] = error_result.new_status
                    if error_result.recovery_time:
                        if error_result.error_type == ErrorType.FLOOD_WAIT:
                            new_values['flood_wait_until'] = error_result.recovery_time
                        elif error_result.error_type in [ErrorType.PEER_FLOOD, ErrorType.PHONE_NUMBER_BANNED]:
                            new_values['blocked_until'] = error_result.recovery_time
            
            # 4. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await session.execute(
                update(TelegramSession)
                .where(TelegramSession.id == account_id)
                .values(**new_values)
            )
            await session.commit()
            
            # 5. –û—Å–≤–æ–±–æ–¥–∏—Ç—å distributed lock
            await self._release_account_lock(account_id, service_name)
            
            # 6. –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
            await self.log_service.log_integration_action(
                session=session,
                user_id=account.user_id,
                integration_type="telegram",
                action="account_released",
                status="success",
                details={
                    "account_id": str(account_id),
                    "service": service_name,
                    "usage_stats": {
                        "invites_sent": usage_stats.invites_sent,
                        "messages_sent": usage_stats.messages_sent,
                        "contacts_added": usage_stats.contacts_added,
                        "success": usage_stats.success,
                        "error_type": usage_stats.error_type
                    }
                }
            )
            
            logger.info(f"‚úÖ Account {account_id} released successfully")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error releasing account {account_id}: {e}")
            return False
    
    async def handle_account_error(
        self,
        session: AsyncSession,
        account_id: UUID,
        error_type: ErrorType,
        error_message: str,
        context: Dict[str, Any] = None
    ) -> Optional[AccountErrorResult]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            session: Database session
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        
        Returns:
            AccountErrorResult —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –º–µ—Ä–∞—Ö
        """
        try:
            logger.warning(f"‚ö†Ô∏è Handling account error: {error_type} for account {account_id}")
            
            context = context or {}
            now = datetime.now(timezone.utc)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
            if error_type == ErrorType.FLOOD_WAIT:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                match = re.search(r'(\d+)', error_message)
                seconds = int(match.group(1)) if match else 300  # Fallback: 5 –º–∏–Ω—É—Ç
                
                recovery_time = now + timedelta(seconds=seconds + 60)  # +1 –º–∏–Ω—É—Ç–∞ –±—É—Ñ–µ—Ä
                new_status = AccountStatus.FLOOD_WAIT
                action_taken = f"Set flood wait until {recovery_time}"
                should_retry = True
                
            elif error_type == ErrorType.PEER_FLOOD:
                recovery_time = now + timedelta(hours=24)  # 24 —á–∞—Å–∞
                new_status = AccountStatus.BLOCKED
                action_taken = "Blocked for 24 hours due to peer flood"
                should_retry = False
                
            elif error_type in [ErrorType.PHONE_NUMBER_BANNED, ErrorType.USER_DEACTIVATED]:
                recovery_time = None  # Permanent
                new_status = AccountStatus.DISABLED
                action_taken = "Permanently disabled"
                should_retry = False
                
            elif error_type == ErrorType.AUTH_KEY_ERROR:
                recovery_time = None
                new_status = AccountStatus.DISABLED
                action_taken = "Disabled due to auth key error"
                should_retry = False
                
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                recovery_time = now + timedelta(minutes=30)
                new_status = AccountStatus.ACTIVE  # –û—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º
                action_taken = "Incremented error count"
                should_retry = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            update_values = {
                'status': new_status,
                'error_count': TelegramSession.error_count + 1
            }
            
            if error_type == ErrorType.FLOOD_WAIT and recovery_time:
                update_values['flood_wait_until'] = recovery_time
            elif error_type in [ErrorType.PEER_FLOOD, ErrorType.PHONE_NUMBER_BANNED] and recovery_time:
                update_values['blocked_until'] = recovery_time
            
            await session.execute(
                update(TelegramSession)
                .where(TelegramSession.id == account_id)
                .values(**update_values)
            )
            await session.commit()
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = AccountErrorResult(
                account_id=account_id,
                error_type=error_type,
                action_taken=action_taken,
                new_status=new_status,
                recovery_time=recovery_time,
                should_retry=should_retry,
                message=f"Error handled: {error_message}"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            await self.log_service.log_integration_action(
                session=session,
                user_id=context.get('user_id', 0),
                integration_type="telegram",
                action="account_error_handled",
                status="success",
                details={
                    "account_id": str(account_id),
                    "error_type": error_type,
                    "error_message": error_message,
                    "action_taken": action_taken,
                    "new_status": new_status,
                    "recovery_time": recovery_time.isoformat() if recovery_time else None,
                    "context": context
                }
            )
            
            logger.info(f"‚úÖ Error handled for account {account_id}: {action_taken}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Error handling account error: {e}")
            return None
    
    async def _find_available_accounts(
        self,
        session: AsyncSession,
        user_id: int,
        purpose: AccountPurpose,
        preferred_account_id: Optional[UUID] = None
    ) -> List[TelegramSession]:
        """
        –ù–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        now = datetime.now(timezone.utc)
        
        # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ (–ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º locked –ø–æ–ª—è –≤ –ë–î!)
        conditions = [
            TelegramSession.user_id == user_id,
            TelegramSession.is_active == True,
            TelegramSession.status == AccountStatus.ACTIVE,
            or_(
                TelegramSession.flood_wait_until.is_(None),
                TelegramSession.flood_wait_until <= now
            ),
            or_(
                TelegramSession.blocked_until.is_(None),
                TelegramSession.blocked_until <= now
            )
        ]
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        if preferred_account_id:
            conditions.append(TelegramSession.id == preferred_account_id)
        
        query = select(TelegramSession).where(and_(*conditions))
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)
        query = query.order_by(
            TelegramSession.used_invites_today.asc(),
            TelegramSession.used_messages_today.asc(),
            TelegramSession.last_used_at.asc().nulls_first()
        )
        
        result = await session.execute(query)
        accounts = result.scalars().all()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ª–∏–º–∏—Ç–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
        filtered_accounts = []
        for account in accounts:
            # –ü–†–û–í–ï–†–Ø–ï–ú REDIS LOCKS - –≥–ª–∞–≤–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏!
            lock_key = f"account_lock:{account.id}"
            if self.redis_client.exists(lock_key):
                logger.debug(f"üîí Account {account.id} is locked in Redis, skipping")
                continue
            
            if purpose == AccountPurpose.INVITE_CAMPAIGN and account.can_send_invite():
                filtered_accounts.append(account)
            elif purpose == AccountPurpose.MESSAGE_CAMPAIGN and account.can_send_message():
                filtered_accounts.append(account)
            elif purpose in [AccountPurpose.PARSING, AccountPurpose.GENERAL]:
                filtered_accounts.append(account)
        
        return filtered_accounts
    
    async def _select_optimal_account(
        self,
        accounts: List[TelegramSession],
        purpose: AccountPurpose
    ) -> TelegramSession:
        """
        –í—ã–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        """
        if not accounts:
            raise ValueError("No accounts provided")
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏
        def account_score(account: TelegramSession) -> float:
            score = 0.0
            
            # –ß–µ–º –º–µ–Ω—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, —Ç–µ–º –ª—É—á—à–µ
            if purpose == AccountPurpose.INVITE_CAMPAIGN:
                usage_ratio = account.used_invites_today / account.daily_invite_limit
            elif purpose == AccountPurpose.MESSAGE_CAMPAIGN:
                usage_ratio = account.used_messages_today / account.daily_message_limit
            else:
                usage_ratio = (account.used_invites_today + account.used_messages_today) / 60
            
            score += (1.0 - usage_ratio) * 100
            
            # –ë–æ–Ω—É—Å –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ—à–∏–±–æ–∫
            if account.error_count == 0:
                score += 10
            
            # –ë–æ–Ω—É—Å –∑–∞ –¥–∞–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if account.last_used_at:
                hours_since_use = (datetime.now(timezone.utc) - account.last_used_at).total_seconds() / 3600
                score += min(hours_since_use, 24)  # –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞
            else:
                score += 24  # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
            
            return score
        
        # –í—ã–±–∏—Ä–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å –Ω–∞–∏–≤—ã—Å—à–∏–º score
        optimal_account = max(accounts, key=account_score)
        return optimal_account
    
    async def _acquire_account_lock(
        self,
        account_id: UUID,
        service_name: str,
        timeout_minutes: int
    ) -> bool:
        """
        –ü–æ–ª—É—á–∏—Ç—å distributed lock –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
        """
        lock_key = f"account_lock:{account_id}"
        lock_value = f"{service_name}:{datetime.now(timezone.utc).isoformat()}"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º lock —Å TTL
        result = self.redis_client.set(
            lock_key, 
            lock_value, 
            nx=True,  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            ex=timeout_minutes * 60  # TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        )
        
        if result:
            logger.debug(f"üîí Acquired lock for account {account_id} by {service_name}")
            return True
        else:
            logger.warning(f"‚ùå Failed to acquire lock for account {account_id}, already locked")
            return False
    
    async def _release_account_lock(
        self,
        account_id: UUID,
        service_name: str
    ) -> bool:
        """
        –û—Å–≤–æ–±–æ–¥–∏—Ç—å distributed lock –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
        """
        lock_key = f"account_lock:{account_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ lock
        current_value = self.redis_client.get(lock_key)
        
        if current_value and current_value.startswith(f"{service_name}:"):
            # –£–¥–∞–ª—è–µ–º lock —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É
            self.redis_client.delete(lock_key)
            logger.debug(f"üîì Released lock for account {account_id} by {service_name}")
            return True
        elif current_value:
            logger.warning(f"‚ùå Cannot release lock for account {account_id}, owned by: {current_value}")
            return False
        else:
            # Lock —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            return True