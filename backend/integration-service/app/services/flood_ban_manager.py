"""
Flood/Ban Management Service
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª—É–¥-–æ–∂–∏–¥–∞–Ω–∏—è–º–∏, –±–∞–Ω–∞–º–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""
import logging
import asyncio
from typing import List, Dict, Optional
from datetime import datetime, timedelta
from uuid import UUID
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, and_, or_, func
import redis
import json

from ..models.telegram_sessions import TelegramSession
from ..models.account_manager_types import (
    AccountStatus, ErrorType, FloodWaitInfo, AccountHealthStatus
)
from ..core.config import get_settings
from .integration_log_service import IntegrationLogService

logger = logging.getLogger(__name__)

class FloodBanManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª—É–¥-–æ–∂–∏–¥–∞–Ω–∏—è–º–∏ –∏ –±–∞–Ω–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.settings = get_settings()
        self.log_service = IntegrationLogService()
        
        # Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –æ—á–µ—Ä–µ–¥–µ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        self.redis_client = redis.Redis(
            host=self.settings.REDIS_HOST,
            port=self.settings.REDIS_PORT,
            db=self.settings.REDIS_DB + 2,  # –û—Ç–¥–µ–ª—å–Ω–∞—è DB –¥–ª—è Flood/Ban Manager
            decode_responses=True
        )
    
    async def check_account_health(
        self,
        session: AsyncSession,
        account_id: UUID
    ) -> AccountHealthStatus:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            session: Database session
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Returns:
            AccountHealthStatus: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
            result = await session.execute(
                select(TelegramSession).where(TelegramSession.id == account_id)
            )
            account = result.scalar_one_or_none()
            
            if not account:
                return AccountHealthStatus(
                    account_id=account_id,
                    is_healthy=False,
                    status=AccountStatus.DISABLED,
                    issues=["Account not found"],
                    recovery_eta=None,
                    last_check=datetime.utcnow()
                )
            
            now = datetime.utcnow()
            issues = []
            is_healthy = True
            recovery_eta = None
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            if account.status != AccountStatus.ACTIVE:
                is_healthy = False
                issues.append(f"Account status: {account.status}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ flood wait
            if account.flood_wait_until and account.flood_wait_until > now:
                is_healthy = False
                issues.append(f"Flood wait until: {account.flood_wait_until}")
                if not recovery_eta or account.flood_wait_until < recovery_eta:
                    recovery_eta = account.flood_wait_until
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if account.blocked_until and account.blocked_until > now:
                is_healthy = False
                issues.append(f"Blocked until: {account.blocked_until}")
                if not recovery_eta or account.blocked_until < recovery_eta:
                    recovery_eta = account.blocked_until
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            if account.used_invites_today >= account.daily_invite_limit:
                is_healthy = False
                issues.append("Daily invite limit reached")
            
            if account.used_messages_today >= account.daily_message_limit:
                is_healthy = False
                issues.append("Daily message limit reached")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
            if account.error_count > 5:
                is_healthy = False
                issues.append(f"High error count: {account.error_count}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–æ–º
            if account.locked and account.locked_until and account.locked_until > now:
                is_healthy = False
                issues.append(f"Locked by: {account.locked_by} until: {account.locked_until}")
                if not recovery_eta or account.locked_until < recovery_eta:
                    recovery_eta = account.locked_until
            
            return AccountHealthStatus(
                account_id=account_id,
                is_healthy=is_healthy,
                status=account.status,
                issues=issues if issues else ["Account is healthy"],
                recovery_eta=recovery_eta,
                last_check=now,
                metadata={
                    "used_invites_today": account.used_invites_today,
                    "used_messages_today": account.used_messages_today,
                    "error_count": account.error_count,
                    "last_used_at": account.last_used_at.isoformat() if account.last_used_at else None
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error checking account health {account_id}: {e}")
            return AccountHealthStatus(
                account_id=account_id,
                is_healthy=False,
                status=AccountStatus.DISABLED,
                issues=[f"Health check error: {str(e)}"],
                recovery_eta=None,
                last_check=datetime.utcnow()
            )
    
    async def schedule_account_recovery(
        self,
        session: AsyncSession,
        account_id: UUID,
        recovery_time: datetime,
        recovery_type: str = "auto"
    ) -> bool:
        """
        –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            session: Database session
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            recovery_time: –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            recovery_type: –¢–∏–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (auto, manual, flood_wait, ban_lift)
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            logger.info(f"üìÖ Scheduling recovery for account {account_id} at {recovery_time}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis —Å timestamp –∫–∞–∫ score –¥–ª—è sorted set
            recovery_timestamp = recovery_time.timestamp()
            recovery_data = {
                "account_id": str(account_id),
                "recovery_time": recovery_time.isoformat(),
                "recovery_type": recovery_type,
                "scheduled_at": datetime.utcnow().isoformat()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ sorted set –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            self.redis_client.zadd(
                "account_recovery_queue",
                {json.dumps(recovery_data): recovery_timestamp}
            )
            
            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            recovery_key = f"recovery:{account_id}"
            self.redis_client.setex(
                recovery_key,
                int((recovery_time - datetime.utcnow()).total_seconds()) + 3600,  # +1 —á–∞—Å –±—É—Ñ–µ—Ä
                json.dumps(recovery_data)
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            await self.log_service.log_integration_action(
                session=session,
                user_id=0,  # –°–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                integration_type="telegram",
                action="recovery_scheduled",
                status="success",
                details={
                    "account_id": str(account_id),
                    "recovery_time": recovery_time.isoformat(),
                    "recovery_type": recovery_type
                }
            )
            
            logger.info(f"‚úÖ Recovery scheduled for account {account_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error scheduling recovery for account {account_id}: {e}")
            return False
    
    async def process_pending_recoveries(
        self,
        session: AsyncSession,
        limit: int = 50
    ) -> int:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        
        Args:
            session: Database session
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
        """
        try:
            now = datetime.utcnow()
            current_timestamp = now.timestamp()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—à–ª–æ
            recoveries = self.redis_client.zrangebyscore(
                "account_recovery_queue",
                0,
                current_timestamp,
                start=0,
                num=limit,
                withscores=True
            )
            
            processed_count = 0
            
            for recovery_json, score in recoveries:
                try:
                    recovery_data = json.loads(recovery_json)
                    account_id = UUID(recovery_data["account_id"])
                    recovery_type = recovery_data["recovery_type"]
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                    success = await self._recover_account(session, account_id, recovery_type)
                    
                    if success:
                        processed_count += 1
                        logger.info(f"‚úÖ Account {account_id} recovered successfully")
                    else:
                        logger.warning(f"‚ö†Ô∏è Failed to recover account {account_id}")
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    self.redis_client.zrem("account_recovery_queue", recovery_json)
                    
                    # –£–¥–∞–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    recovery_key = f"recovery:{account_id}"
                    self.redis_client.delete(recovery_key)
                    
                except Exception as e:
                    logger.error(f"‚ùå Error processing recovery: {e}")
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
                    self.redis_client.zrem("account_recovery_queue", recovery_json)
            
            if processed_count > 0:
                logger.info(f"üìà Processed {processed_count} account recoveries")
            
            return processed_count
            
        except Exception as e:
            logger.error(f"‚ùå Error processing pending recoveries: {e}")
            return 0
    
    async def _recover_account(
        self,
        session: AsyncSession,
        account_id: UUID,
        recovery_type: str
    ) -> bool:
        """
        –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        
        Args:
            session: Database session
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            recovery_type: –¢–∏–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
            result = await session.execute(
                select(TelegramSession).where(TelegramSession.id == account_id)
            )
            account = result.scalar_one_or_none()
            
            if not account:
                logger.warning(f"‚ùå Account {account_id} not found for recovery")
                return False
            
            now = datetime.utcnow()
            update_values = {}
            
            # –û—á–∏—â–∞–µ–º flood wait –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ
            if account.flood_wait_until and account.flood_wait_until <= now:
                update_values['flood_wait_until'] = None
                logger.info(f"üîì Cleared flood wait for account {account_id}")
            
            # –û—á–∏—â–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ
            if account.blocked_until and account.blocked_until <= now:
                update_values['blocked_until'] = None
                logger.info(f"üîì Cleared block for account {account_id}")
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –º–æ–∂–µ–º
            if account.status in [AccountStatus.FLOOD_WAIT, AccountStatus.BLOCKED]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –∏—Å—Ç–µ–∫–ª–∏
                if (not account.flood_wait_until or account.flood_wait_until <= now) and \
                   (not account.blocked_until or account.blocked_until <= now):
                    update_values['status'] = AccountStatus.ACTIVE
                    logger.info(f"‚úÖ Restored account {account_id} to ACTIVE status")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
            if recovery_type == "auto" and update_values:
                update_values['error_count'] = 0
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
            if update_values:
                await session.execute(
                    update(TelegramSession)
                    .where(TelegramSession.id == account_id)
                    .values(**update_values)
                )
                await session.commit()
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                await self.log_service.log_integration_action(
                    session=session,
                    user_id=account.user_id,
                    integration_type="telegram",
                    action="account_recovered",
                    status="success",
                    details={
                        "account_id": str(account_id),
                        "recovery_type": recovery_type,
                        "updates": list(update_values.keys())
                    }
                )
                
                return True
            else:
                logger.info(f"‚ÑπÔ∏è Account {account_id} doesn't need recovery")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Error recovering account {account_id}: {e}")
            return False
    
    async def reset_daily_limits(
        self,
        session: AsyncSession,
        target_date: datetime = None
    ) -> int:
        """
        –°–±—Ä–æ—Å–∏—Ç—å –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        
        Args:
            session: Database session
            target_date: –î–∞—Ç–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è)
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        """
        try:
            target_date = target_date or datetime.utcnow()
            logger.info(f"üîÑ Resetting daily limits for date: {target_date.date()}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            result = await session.execute(
                update(TelegramSession)
                .where(TelegramSession.is_active == True)
                .values(
                    used_invites_today=0,
                    used_messages_today=0,
                    contacts_today=0,
                    per_channel_invites={},
                    last_limit_reset=target_date
                )
            )
            
            affected_rows = result.rowcount
            await session.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            await self.log_service.log_integration_action(
                session=session,
                user_id=0,  # –°–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                integration_type="telegram",
                action="daily_limits_reset",
                status="success",
                details={
                    "reset_date": target_date.isoformat(),
                    "affected_accounts": affected_rows
                }
            )
            
            logger.info(f"‚úÖ Reset daily limits for {affected_rows} accounts")
            return affected_rows
            
        except Exception as e:
            logger.error(f"‚ùå Error resetting daily limits: {e}")
            return 0
    
    async def get_flood_wait_info(
        self,
        session: AsyncSession,
        account_id: UUID
    ) -> Optional[FloodWaitInfo]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–ª—É–¥-–æ–∂–∏–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            session: Database session
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Returns:
            FloodWaitInfo –∏–ª–∏ None
        """
        try:
            result = await session.execute(
                select(TelegramSession).where(TelegramSession.id == account_id)
            )
            account = result.scalar_one_or_none()
            
            if not account or not account.flood_wait_until:
                return None
            
            now = datetime.utcnow()
            
            if account.flood_wait_until <= now:
                return None  # Flood wait –∏—Å—Ç–µ–∫
            
            return FloodWaitInfo(
                account_id=account_id,
                wait_until=account.flood_wait_until,
                seconds_remaining=int((account.flood_wait_until - now).total_seconds()),
                reason="Telegram API flood protection",
                can_retry_at=account.flood_wait_until
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error getting flood wait info for account {account_id}: {e}")
            return None
    
    async def get_account_recovery_stats(self, session: AsyncSession) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        
        Args:
            session: Database session
        
        Returns:
            Dict —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            now = datetime.utcnow()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            result = await session.execute(
                select(
                    TelegramSession.status,
                    func.count(TelegramSession.id).label('count')
                )
                .where(TelegramSession.is_active == True)
                .group_by(TelegramSession.status)
            )
            status_stats = {row.status: row.count for row in result}
            
            # –ê–∫–∫–∞—É–Ω—Ç—ã –≤ flood wait
            flood_wait_result = await session.execute(
                select(func.count(TelegramSession.id))
                .where(
                    and_(
                        TelegramSession.is_active == True,
                        TelegramSession.flood_wait_until > now
                    )
                )
            )
            flood_wait_count = flood_wait_result.scalar() or 0
            
            # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            blocked_result = await session.execute(
                select(func.count(TelegramSession.id))
                .where(
                    and_(
                        TelegramSession.is_active == True,
                        TelegramSession.blocked_until > now
                    )
                )
            )
            blocked_count = blocked_result.scalar() or 0
            
            # –ê–∫–∫–∞—É–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—à–∏–±–æ–∫
            high_error_result = await session.execute(
                select(func.count(TelegramSession.id))
                .where(
                    and_(
                        TelegramSession.is_active == True,
                        TelegramSession.error_count > 5
                    )
                )
            )
            high_error_count = high_error_result.scalar() or 0
            
            # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
            locked_result = await session.execute(
                select(func.count(TelegramSession.id))
                .where(
                    and_(
                        TelegramSession.is_active == True,
                        TelegramSession.locked == True,
                        TelegramSession.locked_until > now
                    )
                )
            )
            locked_count = locked_result.scalar() or 0
            
            # –û—á–µ—Ä–µ–¥—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            recovery_queue_size = self.redis_client.zcard("account_recovery_queue") or 0
            
            return {
                "total_active": sum(status_stats.values()),
                "status_breakdown": status_stats,
                "flood_wait_active": flood_wait_count,
                "blocked_active": blocked_count,
                "high_error_count": high_error_count,
                "locked_by_services": locked_count,
                "recovery_queue_size": recovery_queue_size,
                "healthy_accounts": status_stats.get(AccountStatus.ACTIVE, 0) - flood_wait_count - blocked_count - locked_count
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error getting recovery stats: {e}")
            return {
                "total_active": 0,
                "status_breakdown": {},
                "flood_wait_active": 0,
                "blocked_active": 0,
                "high_error_count": 0,
                "locked_by_services": 0,
                "recovery_queue_size": 0,
                "healthy_accounts": 0
            }