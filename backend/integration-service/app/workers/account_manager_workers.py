"""
Account Manager Background Workers
–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""
import logging
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any
from celery import Celery
from celery.schedules import crontab
from sqlalchemy.ext.asyncio import AsyncSession

from ..core.config import get_settings
from ..core.database import get_async_session
from ..services.account_manager import AccountManagerService
from ..services.flood_ban_manager import FloodBanManager
from ..services.rate_limiting_service import RateLimitingService
from ..services.integration_log_service import IntegrationLogService

logger = logging.getLogger(__name__)

# Celery app configuration
settings = get_settings()

celery_app = Celery(
    "account_manager_workers",
    broker=f"redis://{settings.REDIS_HOST}:{settings.REDIS_PORT}/{settings.REDIS_DB + 4}",
    backend=f"redis://{settings.REDIS_HOST}:{settings.REDIS_PORT}/{settings.REDIS_DB + 4}",
    include=["app.workers.account_manager_workers"]
)

# Celery configuration
celery_app.conf.update(
    task_serializer="json",
    accept_content=["json"],
    result_serializer="json",
    timezone="UTC",
    enable_utc=True,
    worker_prefetch_multiplier=1,
    task_acks_late=True,
    worker_disable_rate_limits=False,
    task_routes={
        "account_manager_workers.process_account_recoveries": {"queue": "account_manager_high"},
        "account_manager_workers.reset_daily_limits": {"queue": "account_manager_high"},
        "account_manager_workers.monitor_account_health": {"queue": "account_manager_normal"},
        "account_manager_workers.cleanup_expired_locks": {"queue": "account_manager_low"},
        "account_manager_workers.cleanup_rate_limit_data": {"queue": "account_manager_low"},
        "account_manager_workers.generate_health_report": {"queue": "account_manager_low"}
    }
)

# Periodic tasks schedule
celery_app.conf.beat_schedule = {
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    "process-account-recoveries": {
        "task": "account_manager_workers.process_account_recoveries",
        "schedule": 300.0,  # 5 –º–∏–Ω—É—Ç
        "options": {"queue": "account_manager_high"}
    },
    
    # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –≤ –ø–æ–ª–Ω–æ—á—å UTC
    "reset-daily-limits": {
        "task": "account_manager_workers.reset_daily_limits",
        "schedule": crontab(hour=0, minute=0),
        "options": {"queue": "account_manager_high"}
    },
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    "monitor-account-health": {
        "task": "account_manager_workers.monitor_account_health",
        "schedule": 900.0,  # 15 –º–∏–Ω—É—Ç
        "options": {"queue": "account_manager_normal"}
    },
    
    # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    "cleanup-expired-locks": {
        "task": "account_manager_workers.cleanup_expired_locks",
        "schedule": 1800.0,  # 30 –º–∏–Ω—É—Ç
        "options": {"queue": "account_manager_low"}
    },
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö rate limiting –∫–∞–∂–¥—ã–π —á–∞—Å
    "cleanup-rate-limit-data": {
        "task": "account_manager_workers.cleanup_rate_limit_data",
        "schedule": 3600.0,  # 1 —á–∞—Å
        "options": {"queue": "account_manager_low"}
    },
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    "generate-health-report": {
        "task": "account_manager_workers.generate_health_report",
        "schedule": 21600.0,  # 6 —á–∞—Å–æ–≤
        "options": {"queue": "account_manager_low"}
    }
}

# Helper function –¥–ª—è async –æ–ø–µ—Ä–∞—Ü–∏–π –≤ Celery
async def run_async_task(coro):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å async –æ–ø–µ—Ä–∞—Ü–∏—é –≤ Celery —Ç–∞—Å–∫–µ"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        return await coro
    finally:
        loop.close()

# Background tasks
@celery_app.task(bind=True, autoretry_for=(Exception,), retry_kwargs={"max_retries": 3, "countdown": 60})
def process_account_recoveries(self, limit: int = 50):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    """
    async def _process_recoveries():
        try:
            logger.info("üîÑ Starting account recovery processing")
            
            # –ü–æ–ª—É—á–∞–µ–º database session
            async with get_async_session() as session:
                flood_ban_manager = FloodBanManager()
                log_service = IntegrationLogService()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                processed_count = await flood_ban_manager.process_pending_recoveries(
                    session=session,
                    limit=limit
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await log_service.log_integration_action(
                    session=session,
                    user_id=0,  # –°–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                    integration_type="telegram",
                    action="background_recovery_processing",
                    status="success",
                    details={
                        "processed_count": processed_count,
                        "limit": limit,
                        "task_id": str(self.request.id)
                    }
                )
                
                logger.info(f"‚úÖ Processed {processed_count} account recoveries")
                return {"processed_count": processed_count, "success": True}
                
        except Exception as e:
            logger.error(f"‚ùå Error processing account recoveries: {e}")
            raise
    
    return asyncio.run(_process_recoveries())

@celery_app.task(bind=True, autoretry_for=(Exception,), retry_kwargs={"max_retries": 3, "countdown": 60})
def reset_daily_limits(self):
    """
    –°–±—Ä–æ—Å–∏—Ç—å –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    """
    async def _reset_limits():
        try:
            logger.info("üîÑ Starting daily limits reset")
            
            async with get_async_session() as session:
                flood_ban_manager = FloodBanManager()
                log_service = IntegrationLogService()
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã
                affected_count = await flood_ban_manager.reset_daily_limits(session)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await log_service.log_integration_action(
                    session=session,
                    user_id=0,  # –°–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                    integration_type="telegram",
                    action="background_daily_limits_reset",
                    status="success",
                    details={
                        "affected_count": affected_count,
                        "reset_date": datetime.utcnow().isoformat(),
                        "task_id": str(self.request.id)
                    }
                )
                
                logger.info(f"‚úÖ Reset daily limits for {affected_count} accounts")
                return {"affected_count": affected_count, "success": True}
                
        except Exception as e:
            logger.error(f"‚ùå Error resetting daily limits: {e}")
            raise
    
    return asyncio.run(_reset_limits())

@celery_app.task(bind=True, autoretry_for=(Exception,), retry_kwargs={"max_retries": 3, "countdown": 60})
def monitor_account_health(self, check_limit: int = 100):
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    async def _monitor_health():
        try:
            logger.info("üîÑ Starting account health monitoring")
            
            async with get_async_session() as session:
                from ..models.telegram_sessions import TelegramSession
                from sqlalchemy import select, and_
                
                flood_ban_manager = FloodBanManager()
                log_service = IntegrationLogService()
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
                now = datetime.utcnow()
                result = await session.execute(
                    select(TelegramSession)
                    .where(
                        and_(
                            TelegramSession.is_active == True,
                            or_(
                                TelegramSession.flood_wait_until.isnot(None),
                                TelegramSession.blocked_until.isnot(None),
                                TelegramSession.error_count > 3
                            )
                        )
                    )
                    .limit(check_limit)
                )
                
                problematic_accounts = result.scalars().all()
                
                health_issues = []
                scheduled_recoveries = 0
                
                for account in problematic_accounts:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                    health_status = await flood_ban_manager.check_account_health(
                        session=session,
                        account_id=account.id
                    )
                    
                    if not health_status.is_healthy and health_status.recovery_eta:
                        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
                        recovery_scheduled = await flood_ban_manager.schedule_account_recovery(
                            session=session,
                            account_id=account.id,
                            recovery_time=health_status.recovery_eta,
                            recovery_type="auto_monitoring"
                        )
                        
                        if recovery_scheduled:
                            scheduled_recoveries += 1
                    
                    if not health_status.is_healthy:
                        health_issues.append({
                            "account_id": str(account.id),
                            "phone": account.phone,
                            "issues": health_status.issues,
                            "recovery_eta": health_status.recovery_eta.isoformat() if health_status.recovery_eta else None
                        })
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                await log_service.log_integration_action(
                    session=session,
                    user_id=0,  # –°–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                    integration_type="telegram",
                    action="background_health_monitoring",
                    status="success",
                    details={
                        "checked_accounts": len(problematic_accounts),
                        "health_issues_found": len(health_issues),
                        "scheduled_recoveries": scheduled_recoveries,
                        "task_id": str(self.request.id)
                    }
                )
                
                logger.info(f"‚úÖ Health monitoring: {len(problematic_accounts)} accounts checked, {scheduled_recoveries} recoveries scheduled")
                return {
                    "checked_accounts": len(problematic_accounts),
                    "health_issues": health_issues,
                    "scheduled_recoveries": scheduled_recoveries,
                    "success": True
                }
                
        except Exception as e:
            logger.error(f"‚ùå Error monitoring account health: {e}")
            raise
    
    return asyncio.run(_monitor_health())

@celery_app.task(bind=True, autoretry_for=(Exception,), retry_kwargs={"max_retries": 3, "countdown": 60})
def cleanup_expired_locks(self):
    """
    –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    """
    async def _cleanup_locks():
        try:
            logger.info("üîÑ Starting expired locks cleanup")
            
            async with get_async_session() as session:
                from ..models.telegram_sessions import TelegramSession
                from sqlalchemy import update, and_
                
                log_service = IntegrationLogService()
                
                # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                now = datetime.utcnow()
                result = await session.execute(
                    update(TelegramSession)
                    .where(
                        and_(
                            TelegramSession.locked == True,
                            TelegramSession.locked_until < now
                        )
                    )
                    .values(
                        locked=False,
                        locked_by=None,
                        locked_until=None
                    )
                )
                
                cleared_locks = result.rowcount
                await session.commit()
                
                # –û—á–∏—â–∞–µ–º Redis locks
                account_manager = AccountManagerService()
                redis_keys = account_manager.redis_client.keys("account_lock:*")
                expired_redis_locks = 0
                
                for key in redis_keys:
                    ttl = account_manager.redis_client.ttl(key)
                    if ttl == -1:  # –ö–ª—é—á –±–µ–∑ TTL (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)
                        account_manager.redis_client.delete(key)
                        expired_redis_locks += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await log_service.log_integration_action(
                    session=session,
                    user_id=0,  # –°–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                    integration_type="telegram",
                    action="background_locks_cleanup",
                    status="success",
                    details={
                        "cleared_db_locks": cleared_locks,
                        "cleared_redis_locks": expired_redis_locks,
                        "task_id": str(self.request.id)
                    }
                )
                
                logger.info(f"‚úÖ Cleaned up {cleared_locks} DB locks and {expired_redis_locks} Redis locks")
                return {
                    "cleared_db_locks": cleared_locks,
                    "cleared_redis_locks": expired_redis_locks,
                    "success": True
                }
                
        except Exception as e:
            logger.error(f"‚ùå Error cleaning up expired locks: {e}")
            raise
    
    return asyncio.run(_cleanup_locks())

@celery_app.task(bind=True, autoretry_for=(Exception,), retry_kwargs={"max_retries": 3, "countdown": 60})
def cleanup_rate_limit_data(self):
    """
    –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ rate limiting
    """
    async def _cleanup_rate_limits():
        try:
            logger.info("üîÑ Starting rate limit data cleanup")
            
            rate_limiting_service = RateLimitingService()
            
            # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
            deleted_count = await rate_limiting_service.cleanup_expired_data()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            async with get_async_session() as session:
                log_service = IntegrationLogService()
                
                await log_service.log_integration_action(
                    session=session,
                    user_id=0,  # –°–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                    integration_type="telegram",
                    action="background_rate_limit_cleanup",
                    status="success",
                    details={
                        "deleted_keys": deleted_count,
                        "task_id": str(self.request.id)
                    }
                )
            
            logger.info(f"‚úÖ Cleaned up {deleted_count} rate limit keys")
            return {"deleted_keys": deleted_count, "success": True}
            
        except Exception as e:
            logger.error(f"‚ùå Error cleaning up rate limit data: {e}")
            raise
    
    return asyncio.run(_cleanup_rate_limits())

@celery_app.task(bind=True, autoretry_for=(Exception,), retry_kwargs={"max_retries": 3, "countdown": 60})
def generate_health_report(self):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Account Manager —Å–∏—Å—Ç–µ–º—ã
    """
    async def _generate_report():
        try:
            logger.info("üîÑ Generating Account Manager health report")
            
            async with get_async_session() as session:
                flood_ban_manager = FloodBanManager()
                log_service = IntegrationLogService()
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                recovery_stats = await flood_ban_manager.get_account_recovery_stats(session)
                
                # –°–æ–±–∏—Ä–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                from ..models.telegram_sessions import TelegramSession
                from sqlalchemy import select, func, and_
                
                now = datetime.utcnow()
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                total_result = await session.execute(
                    select(func.count(TelegramSession.id))
                    .where(TelegramSession.is_active == True)
                )
                total_accounts = total_result.scalar() or 0
                
                # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                locked_result = await session.execute(
                    select(func.count(TelegramSession.id))
                    .where(
                        and_(
                            TelegramSession.is_active == True,
                            TelegramSession.locked == True,
                            TelegramSession.locked_until > now
                        )
                    )
                )
                locked_accounts = locked_result.scalar() or 0
                
                # –ê–∫–∫–∞—É–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–∏–º–∏—Ç–æ–≤
                high_usage_result = await session.execute(
                    select(func.count(TelegramSession.id))
                    .where(
                        and_(
                            TelegramSession.is_active == True,
                            or_(
                                TelegramSession.used_invites_today >= 25,  # >80% –æ—Ç 30
                                TelegramSession.used_messages_today >= 25   # >80% –æ—Ç 30
                            )
                        )
                    )
                )
                high_usage_accounts = high_usage_result.scalar() or 0
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                health_report = {
                    "generated_at": datetime.utcnow().isoformat(),
                    "task_id": str(self.request.id),
                    "summary": {
                        "total_accounts": total_accounts,
                        "healthy_accounts": recovery_stats.get("healthy_accounts", 0),
                        "locked_accounts": locked_accounts,
                        "high_usage_accounts": high_usage_accounts,
                        "health_percentage": (recovery_stats.get("healthy_accounts", 0) / total_accounts * 100) if total_accounts > 0 else 0
                    },
                    "recovery_stats": recovery_stats,
                    "alerts": []
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
                if recovery_stats.get("flood_wait_active", 0) > total_accounts * 0.1:  # >10% –≤ flood wait
                    health_report["alerts"].append({
                        "level": "warning",
                        "message": f"High number of accounts in flood wait: {recovery_stats.get('flood_wait_active', 0)}"
                    })
                
                if recovery_stats.get("blocked_active", 0) > total_accounts * 0.05:  # >5% –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
                    health_report["alerts"].append({
                        "level": "critical",
                        "message": f"High number of blocked accounts: {recovery_stats.get('blocked_active', 0)}"
                    })
                
                if high_usage_accounts > total_accounts * 0.3:  # >30% —Å –≤—ã—Å–æ–∫–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
                    health_report["alerts"].append({
                        "level": "info",
                        "message": f"High number of accounts with high usage: {high_usage_accounts}"
                    })
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                await log_service.log_integration_action(
                    session=session,
                    user_id=0,  # –°–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                    integration_type="telegram",
                    action="background_health_report",
                    status="success",
                    details=health_report
                )
                
                logger.info(f"‚úÖ Generated health report: {health_report['summary']['health_percentage']:.1f}% healthy accounts")
                return health_report
                
        except Exception as e:
            logger.error(f"‚ùå Error generating health report: {e}")
            raise
    
    return asyncio.run(_generate_report())

# Manual task triggers (–¥–ª—è –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ API –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ)
@celery_app.task(bind=True)
def force_account_recovery(self, account_id: str):
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
    """
    async def _force_recovery():
        try:
            from uuid import UUID
            account_uuid = UUID(account_id)
            
            async with get_async_session() as session:
                flood_ban_manager = FloodBanManager()
                
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                success = await flood_ban_manager._recover_account(
                    session=session,
                    account_id=account_uuid,
                    recovery_type="manual_force"
                )
                
                logger.info(f"‚úÖ Force recovery for account {account_id}: {'success' if success else 'failed'}")
                return {"account_id": account_id, "success": success}
                
        except Exception as e:
            logger.error(f"‚ùå Error in force recovery for account {account_id}: {e}")
            raise
    
    return asyncio.run(_force_recovery())

@celery_app.task(bind=True)
def emergency_unlock_account(self, account_id: str, service_name: str = "emergency"):
    """
    –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
    """
    async def _emergency_unlock():
        try:
            from uuid import UUID
            account_uuid = UUID(account_id)
            
            async with get_async_session() as session:
                account_manager = AccountManagerService()
                
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º Redis lock
                await account_manager._release_account_lock(account_uuid, service_name)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                from ..models.telegram_sessions import TelegramSession
                from sqlalchemy import update
                
                await session.execute(
                    update(TelegramSession)
                    .where(TelegramSession.id == account_uuid)
                    .values(
                        locked=False,
                        locked_by=None,
                        locked_until=None
                    )
                )
                await session.commit()
                
                logger.info(f"‚úÖ Emergency unlock for account {account_id}")
                return {"account_id": account_id, "unlocked": True}
                
        except Exception as e:
            logger.error(f"‚ùå Error in emergency unlock for account {account_id}: {e}")
            raise
    
    return asyncio.run(_emergency_unlock())

# Main entry point –¥–ª—è –∑–∞–ø—É—Å–∫–∞ worker'–∞
if __name__ == "__main__":
    celery_app.start()