"""
Account Manager Client –¥–ª—è Parsing Service
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
"""
import httpx
import logging
from typing import Optional, Dict, Any
from datetime import datetime
from ..core.config import get_settings

logger = logging.getLogger(__name__)

class AccountManagerClient:
    """HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Account Manager –≤ Integration Service"""
    
    def __init__(self):
        self.settings = get_settings()
        self.base_url = "http://integration-service:8000/api/v1/account-manager"
        self.timeout = 30.0
        
    async def allocate_account(
        self, 
        user_id: int, 
        purpose: str = "parsing",
        timeout_minutes: int = 60
    ) -> Optional[Dict[str, Any]]:
        """
        –í—ã–¥–µ–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            purpose: –¶–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (parsing)
            timeout_minutes: –¢–∞–π–º–∞—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        """
        try:
            logger.info(f"üîç Requesting account allocation for user {user_id}, purpose: {purpose}")
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(
                    f"{self.base_url}/allocate",
                    json={
                        "user_id": user_id,
                        "purpose": purpose,
                        "service_name": "parsing-service",
                        "timeout_minutes": timeout_minutes
                    }
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('success') and 'allocation' in data:
                        allocation = data['allocation']
                        logger.info(f"‚úÖ Account allocated: {allocation['account_id']}, phone: {allocation['phone']}")
                        return allocation
                    else:
                        logger.error(f"‚ùå Unexpected response format: {data}")
                        return None
                elif response.status_code == 404:
                    logger.warning(f"‚ùå No available accounts for user {user_id}")
                    return None
                else:
                    logger.error(f"‚ùå Account allocation failed: {response.status_code} - {response.text}")
                    response.raise_for_status()
                    
        except Exception as e:
            logger.error(f"‚ùå Error allocating account: {e}")
            return None
    
    async def release_account(
        self,
        account_id: str,
        usage_stats: Dict[str, Any]
    ) -> bool:
        """
        –û—Å–≤–æ–±–æ–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        Args:
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            usage_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üîì Releasing account {account_id}")
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(
                    f"{self.base_url}/release/{account_id}",
                    json={
                        "service_name": "parsing-service",
                        "usage_stats": usage_stats
                    }
                )
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ Account {account_id} released successfully")
                    return True
                else:
                    logger.error(f"‚ùå Failed to release account {account_id}: {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Error releasing account {account_id}: {e}")
            return False
    
    async def handle_error(
        self,
        account_id: str,
        error_type: str,
        error_message: str,
        context: Dict[str, Any] = None
    ) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏ (flood_wait, auth_key_error, etc.)
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.warning(f"‚ö†Ô∏è Handling error for account {account_id}: {error_type}")
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(
                    f"{self.base_url}/handle-error/{account_id}",
                    json={
                        "error_type": error_type,
                        "error_message": error_message,
                        "context": context or {"service": "parsing-service"}
                    }
                )
                
                if response.status_code == 200:
                    result = response.json()
                    logger.info(f"‚úÖ Error handled: {result.get('action_taken', 'Unknown action')}")
                    return True
                else:
                    logger.error(f"‚ùå Failed to handle error: {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Error handling account error: {e}")
            return False
    
    async def check_account_health(self, account_id: str) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–¥–æ—Ä–æ–≤—å—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.get(f"{self.base_url}/health/{account_id}")
                
                if response.status_code == 200:
                    return response.json()
                else:
                    logger.error(f"‚ùå Failed to check account health: {response.status_code}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå Error checking account health: {e}")
            return None
    
    async def release_all_accounts(self) -> Dict[str, Any]:
        """
        –û—Å–≤–æ–±–æ–¥–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üîì Releasing all accounts locked by parsing-service")
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(
                    f"{self.base_url}/release-all",
                    json={
                        "service_name": "parsing-service",
                        "force": True
                    }
                )
                
                if response.status_code == 200:
                    result = response.json()
                    logger.info(f"‚úÖ Released {result.get('released_count', 0)} accounts")
                    return result
                else:
                    logger.error(f"‚ùå Failed to release all accounts: {response.status_code} - {response.text}")
                    return {"error": f"HTTP {response.status_code}", "details": response.text}
                    
        except Exception as e:
            logger.error(f"‚ùå Error releasing all accounts: {e}")
            return {"error": str(e)}

    async def check_rate_limit(
        self,
        account_id: str,
        action_type: str = "parse",
        target_channel_id: Optional[str] = None
    ) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limits –≤ Account Manager –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º –ø–∞—Ä—Å–∏–Ω–≥–∞.
        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º action_type="parse". AM –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.
        """
        try:
            payload = {
                "action_type": action_type,
                "service_name": "parsing-service"
            }
            if target_channel_id:
                payload["target_channel_id"] = target_channel_id

            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(
                    f"{self.base_url}/limits/check/{account_id}",
                    json=payload
                )

                if response.status_code == 200:
                    data = response.json()
                    logger.info(f"‚úÖ Rate limit check for {account_id}: {data}")
                    return data
                else:
                    logger.error(f"‚ùå Rate limit check failed: {response.status_code} - {response.text}")
                    return None
        except Exception as e:
            logger.error(f"‚ùå Error checking rate limit for {account_id}: {e}")
            return None