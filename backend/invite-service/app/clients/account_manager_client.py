"""Account Manager Client –¥–ª—è Invite Service
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏

‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –¢–ó ACCOUNT MANAGER:
- –í—Å–µ –ª–∏–º–∏—Ç—ã —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Account Manager
- Invite Service –Ω–µ –∏–º–µ–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
- –í—Å–µ –ø–∞—É–∑—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è Account Manager
- –°—Ç—Ä–æ–≥–æ–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –¢–ó: 15 –∏–Ω–≤–∞–π—Ç–æ–≤/–¥–µ–Ω—å –Ω–∞ –ø–∞–±–ª–∏–∫, 30/–¥–µ–Ω—å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç, 200 –Ω–∞ –ø–∞–±–ª–∏–∫ –ù–ê–í–°–ï–ì–î–ê, –ø–∞—É–∑—ã 10-15 –º–∏–Ω—É—Ç
"""
import httpx
import logging
from typing import Optional, Dict, Any, List
from datetime import datetime
from ..core.config import get_settings

logger = logging.getLogger(__name__)

class AccountManagerClient:
    """HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Account Manager –≤ Integration Service"""
    
    def __init__(self):
        self.settings = get_settings()
        self.base_url = "http://integration-service:8000/api/v1/account-manager"
        self.timeout = 30.0
        
    async def allocate_account(
        self, 
        user_id: int, 
        purpose: str = "invite_campaign",
        preferred_account_id: Optional[str] = None,
        timeout_minutes: int = 30
    ) -> Optional[Dict[str, Any]]:
        """
        ‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –¢–ó: –í—ã–¥–µ–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        
        Account Manager —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –í–°–ï –ª–∏–º–∏—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó:
        - –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ (active)
        - –õ–∏–º–∏—Ç—ã –∏–Ω–≤–∞–π—Ç–æ–≤: 15/–¥–µ–Ω—å –Ω–∞ –æ–¥–∏–Ω –ø–∞–±–ª–∏–∫, 30/–¥–µ–Ω—å –Ω–∞ –≤–µ—Å—å –∞–∫–∫–∞—É–Ω—Ç, 200 –Ω–∞ –ø–∞–±–ª–∏–∫ –ù–ê–í–°–ï–ì–î–ê
        - –õ–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π: 30/–¥–µ–Ω—å
        - FloodWait, BlockedUntil
        - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç locked = true
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            purpose: –¶–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (invite_campaign)
            preferred_account_id: –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            timeout_minutes: –¢–∞–π–º–∞—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        """
        try:
            logger.info(f"üîç AccountManager: Requesting account allocation for user {user_id}, purpose: {purpose} (–≤—Å–µ –ª–∏–º–∏—Ç—ã —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è Account Manager —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó)")
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(
                    f"{self.base_url}/allocate",
                    json={
                        "user_id": user_id,
                        "purpose": purpose,
                        "service_name": "invite-service",
                        "preferred_account_id": preferred_account_id,
                        "timeout_minutes": timeout_minutes
                    }
                )
                
                if response.status_code == 200:
                    allocation = response.json()
                    logger.info(f"‚úÖ AccountManager: Account allocated: {allocation['account_id']}, phone: {allocation['phone']} (–ª–∏–º–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã Account Manager)")
                    return allocation
                elif response.status_code == 404:
                    logger.warning(f"‚ùå No available accounts for user {user_id}")
                    return None
                else:
                    logger.error(f"‚ùå Account allocation failed: {response.status_code} - {response.text}")
                    response.raise_for_status()
                    
        except Exception as e:
            logger.error(f"‚ùå Error allocating account: {e}")
            return None
    
    async def release_account(
        self,
        account_id: str,
        usage_stats: Dict[str, Any]
    ) -> bool:
        """
        –û—Å–≤–æ–±–æ–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        Args:
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            usage_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üîì AccountManager: Releasing account {account_id} (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –≤ Account Manager)")
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(
                    f"{self.base_url}/release/{account_id}",
                    json={
                        "service_name": "invite-service",
                        "usage_stats": usage_stats
                    }
                )
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ Account {account_id} released successfully")
                    return True
                else:
                    logger.error(f"‚ùå Failed to release account {account_id}: {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Error releasing account {account_id}: {e}")
            return False
    
    async def handle_error(
        self,
        account_id: str,
        error_type: str,
        error_message: str,
        context: Dict[str, Any] = None
    ) -> bool:
        """
        ‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –¢–ó: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Account Manager –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó:
        - FloodWaitError: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç flood_wait_until, status = "flood_wait"
        - PeerFloodError, AuthKeyError: status = "blocked"
        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∫—Ä–æ–Ω—É
        
        Args:
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏ (flood_wait, peer_flood, etc.)
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.warning(f"‚ö†Ô∏è AccountManager: Handling error for account {account_id}: {error_type} (—Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó Account Manager)")
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(
                    f"{self.base_url}/handle-error/{account_id}",
                    json={
                        "error_type": error_type,
                        "error_message": error_message,
                        "context": context or {"service": "invite-service"}
                    }
                )
                
                if response.status_code == 200:
                    result = response.json()
                    logger.info(f"‚úÖ Error handled: {result.get('action_taken', 'Unknown action')}")
                    return True
                else:
                    logger.error(f"‚ùå Failed to handle error: {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Error handling account error: {e}")
            return False
    
    async def check_rate_limit(
        self,
        account_id: str,
        action_type: str = "invite",
        target_channel_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        ‚úÖ –ö–õ–Æ–ß–ï–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –¢–ó: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limits –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
        
        Account Manager –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –í–°–ï –ª–∏–º–∏—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó:
        - –ò–Ω–≤–∞–π—Ç—ã: 15/–¥–µ–Ω—å –Ω–∞ –æ–¥–∏–Ω –ø–∞–±–ª–∏–∫, 30/–¥–µ–Ω—å –Ω–∞ –≤–µ—Å—å –∞–∫–∫–∞—É–Ω—Ç, 200 –Ω–∞ –ø–∞–±–ª–∏–∫ –ù–ê–í–°–ï–ì–î–ê
        - –ü–∞—É–∑—ã: 10-15 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –∏–Ω–≤–∞–π—Ç–∞–º–∏
        - –°–æ–æ–±—â–µ–Ω–∏—è: 30/–¥–µ–Ω—å, –ø–∞—É–∑—ã 1-2 –º–∏–Ω—É—Ç—ã
        - –ö–æ–Ω—Ç–∞–∫—Ç—ã: 15/–¥–µ–Ω—å, –ø–æ—Ç–æ–º 5/–¥–µ–Ω—å
        - –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ 200 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–∞–±–ª–∏–∫ –∞–∫–∫–∞—É–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –≤ –≠–¢–û–¢ –ø–∞–±–ª–∏–∫
        
        Args:
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (invite, message, add_contact)
            target_channel_id: ID —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ª–∏–º–∏—Ç–æ–≤ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–∞—É–∑–∞–º–∏
        """
        try:
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(
                    f"{self.base_url}/rate-limit/check/{account_id}",
                    json={
                        "action_type": action_type,
                        "target_channel_id": target_channel_id
                    }
                )
                
                if response.status_code == 200:
                    return response.json()
                else:
                    logger.error(f"‚ùå Failed to check rate limits: {response.status_code}")
                    return {"allowed": False, "reason": "Rate limit check failed"}
                    
        except Exception as e:
            logger.error(f"‚ùå Error checking rate limits: {e}")
            return {"allowed": False, "reason": f"Error: {e}"}
    
    async def record_action(
        self,
        account_id: str,
        action_type: str = "invite",
        target_channel_id: Optional[str] = None,
        success: bool = True
    ) -> bool:
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        
        Args:
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
            target_channel_id: ID —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
        """
        try:
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(
                    f"{self.base_url}/rate-limit/record/{account_id}",
                    json={
                        "action_type": action_type,
                        "target_channel_id": target_channel_id,
                        "success": success
                    }
                )
                
                return response.status_code == 200
                    
        except Exception as e:
            logger.error(f"‚ùå Error recording action: {e}")
            return False
    
    async def get_account_health(self, account_id: str) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–¥–æ—Ä–æ–≤—å—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.get(f"{self.base_url}/health/{account_id}")
                
                if response.status_code == 200:
                    return response.json()
                else:
                    logger.error(f"‚ùå Failed to check account health: {response.status_code}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå Error checking account health: {e}")
            return None
    
    async def get_recovery_stats(self) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.get(f"{self.base_url}/stats/recovery")
                
                if response.status_code == 200:
                    return response.json()
                else:
                    logger.error(f"‚ùå Failed to get recovery stats: {response.status_code}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå Error getting recovery stats: {e}")
            return None
    
    async def get_available_accounts(self, user_id: int, purpose: Optional[str] = None) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Account Manager."""
        try:
            params = {}
            if purpose:
                params["purpose"] = purpose
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.get(
                    f"{self.base_url}/available-accounts/{user_id}", params=params
                )
                if response.status_code == 200:
                    return response.json()
                else:
                    logger.error(f"‚ùå Failed to get available accounts for user {user_id}: {response.status_code} - {response.text}")
                    return None
        except Exception as e:
            logger.error(f"‚ùå Error getting available accounts: {e}")
            return None

    async def get_accounts_summary(
        self,
        user_id: int,
        purpose: Optional[str] = None,
        target_channel_id: Optional[str] = None,
        limit: int = 500,
    ) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–∏—Ç—Ä–∏–Ω—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Account Manager."""
        try:
            params: Dict[str, Any] = {"user_id": user_id, "limit": limit}
            if purpose:
                params["purpose"] = purpose
            if target_channel_id:
                params["target_channel_id"] = target_channel_id

            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.get(f"{self.base_url}/accounts/summary", params=params)
                if response.status_code == 200:
                    return response.json()
                else:
                    logger.error(
                        f"‚ùå Failed to get accounts summary for user {user_id}: {response.status_code} - {response.text}"
                    )
                    return None
        except Exception as e:
            logger.error(f"‚ùå Error getting accounts summary: {e}")
            return None
    
    async def release_all_accounts(self) -> Dict[str, Any]:
        """
        –û—Å–≤–æ–±–æ–¥–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üîì Releasing all accounts locked by invite-service")
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(
                    f"{self.base_url}/release-all",
                    json={
                        "service_name": "invite-service",
                        "force": True
                    }
                )
                
                if response.status_code == 200:
                    result = response.json()
                    logger.info(f"‚úÖ Released {result.get('released_count', 0)} accounts")
                    return result
                else:
                    logger.error(f"‚ùå Failed to release all accounts: {response.status_code} - {response.text}")
                    return {"error": f"HTTP {response.status_code}", "details": response.text}
                    
        except Exception as e:
            logger.error(f"‚ùå Error releasing all accounts: {e}")
            return {"error": str(e)}