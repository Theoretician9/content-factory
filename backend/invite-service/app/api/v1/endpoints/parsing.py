"""
API endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
"""

from fastapi import APIRouter, Depends, HTTPException
from typing import List, Dict, Any
import logging
import httpx

from app.core.auth import get_current_user_id

router = APIRouter()
logger = logging.getLogger(__name__)


@router.get("/parsing-tasks", response_model=List[Dict[str, Any]])
async def get_parsing_tasks(user_id: int = Depends(get_current_user_id)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    """
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ parsing-service
        logger.info(f"üîç DIAGNOSTIC: Requesting parsing tasks for user_id={user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        token = await _get_jwt_token_for_parsing_service(user_id)
        
        parsing_service_url = "http://parsing-service:8000"
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º grouped —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç parsing-service
            response = await client.get(
                f"{parsing_service_url}/api/v1/results/grouped",
                headers={"Authorization": f"Bearer {token}"}
            )
            
            # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç parsing-service
            logger.info(f"üîç DIAGNOSTIC: Parsing-service response status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                tasks = data.get('tasks', [])
                
                # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                logger.info(f"üîç DIAGNOSTIC: Received {len(tasks)} tasks from parsing-service")
                for i, task in enumerate(tasks[:3]):  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞—á–∏
                    logger.info(f"üîç DIAGNOSTIC: Task {i+1}: {task.get('task_id')} - {task.get('target_url')} ({task.get('total_results')} results)")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
                formatted_tasks = []
                for task in tasks:
                    formatted_task = {
                        "id": task.get('task_id', 'unknown'),
                        "platform": task.get('platform', 'telegram'),
                        "status": task.get('status', 'completed'),
                        "result_count": task.get('total_results', 0),
                        "created_at": task.get('created_at', ''),
                        "link": task.get('target_url', 'Unknown'),
                        "task_type": "channel_members",
                        "title": f"Parse {task.get('target_url', 'Unknown')}"
                    }
                    formatted_tasks.append(formatted_task)
                
                logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(formatted_tasks)} –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return formatted_tasks
            
            elif response.status_code == 401:
                logger.error(f"‚ùå Unauthorized access to parsing-service for user {user_id}")
                return []
            
            else:
                logger.error(f"‚ùå Error from parsing-service: {response.status_code}")
                return []
        
    except Exception as e:
        logger.error(f"‚ùå Error getting parsing tasks: {str(e)}")
        # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
        import traceback
        logger.error(f"‚ùå DIAGNOSTIC: Full error traceback: {traceback.format_exc()}")
        return []


@router.get("/parsing-tasks/{task_id}")
async def get_parsing_task_details(task_id: str, user_id: int = Depends(get_current_user_id)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    try:
        logger.info(f"üîç DIAGNOSTIC: Getting details for task {task_id}, user {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        token = await _get_jwt_token_for_parsing_service(user_id)
        
        parsing_service_url = "http://parsing-service:8000"
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É
            response = await client.get(
                f"{parsing_service_url}/tasks/{task_id}",
                headers={"Authorization": f"Bearer {token}"}
            )
            
            if response.status_code == 200:
                task_data = response.json()
                
                return {
                    "id": task_id,
                    "platform": task_data.get('platform', 'telegram'),
                    "status": task_data.get('status', 'completed'),
                    "result_count": task_data.get('result_count', 0),
                    "link": task_data.get('link', 'Unknown'),
                    "title": task_data.get('settings', {}).get('title', f"Parse {task_id}")
                }
            else:
                logger.error(f"‚ùå Error getting task details: {response.status_code}")
                raise HTTPException(status_code=404, detail="Task not found")
    
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error getting task details: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")


async def _get_jwt_token_for_parsing_service(user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Parsing Service"""
    try:
        from app.core.vault import get_vault_client
        from datetime import datetime, timedelta
        
        vault_client = get_vault_client()
        secret_data = vault_client.get_secret("jwt")
        
        if not secret_data or 'secret_key' not in secret_data:
            raise Exception("JWT secret not found in Vault")
        
        # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        logger.debug(f"üîç DIAGNOSTIC: Creating JWT token for user_id={user_id}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è invite-service —Å —Ä–µ–∞–ª—å–Ω—ã–º user_id
        payload = {
            'service': 'invite-service',
            'user_id': user_id,  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π user_id
            'exp': int((datetime.utcnow() + timedelta(hours=1)).timestamp())
        }
        
        import jwt
        token = jwt.encode(payload, secret_data['secret_key'], algorithm='HS256')
        
        logger.debug(f"üîç DIAGNOSTIC: JWT token created successfully for user_id={user_id}")
        return token
        
    except Exception as e:
        logger.error(f"Error getting JWT token for parsing service: {e}")
        raise 