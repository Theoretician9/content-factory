"""
API endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
"""

from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_, func, desc, asc
from typing import List, Optional
from datetime import datetime
import math
import logging

from app.core.database import get_db
from app.models import InviteTask, TaskStatus, TaskPriority, InviteTarget, TargetStatus
from app.schemas.invite_task import (
    InviteTaskCreate, 
    InviteTaskResponse, 
    InviteTaskUpdate,
    TaskFilterSchema,
    TaskListResponse,
    TaskDuplicateRequest,
    TaskBulkRequest,
    TaskBulkAction,
    TaskSortBy,
    SortOrder
)
from app.core.auth import get_current_user_id

router = APIRouter()
logger = logging.getLogger(__name__)


def apply_task_filters(query, filters: TaskFilterSchema, user_id: int):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –∑–∞–ø—Ä–æ—Å—É –∑–∞–¥–∞—á"""
    # –ë–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    query = query.filter(InviteTask.user_id == user_id)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    if filters.status:
        query = query.filter(InviteTask.status.in_(filters.status))
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    if filters.platform:
        query = query.filter(InviteTask.platform.in_(filters.platform))
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    if filters.priority:
        query = query.filter(InviteTask.priority.in_(filters.priority))
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º —Å–æ–∑–¥–∞–Ω–∏—è
    if filters.created_after:
        query = query.filter(InviteTask.created_at >= filters.created_after)
    
    if filters.created_before:
        query = query.filter(InviteTask.created_at <= filters.created_before)
    
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if filters.name_contains:
        query = query.filter(InviteTask.name.ilike(f"%{filters.name_contains}%"))
    
    return query


def apply_task_sorting(query, sort_by: TaskSortBy, sort_order: SortOrder):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫ –∑–∞–ø—Ä–æ—Å—É –∑–∞–¥–∞—á"""
    order_func = desc if sort_order == SortOrder.DESC else asc
    
    if sort_by == TaskSortBy.CREATED_AT:
        return query.order_by(order_func(InviteTask.created_at))
    elif sort_by == TaskSortBy.UPDATED_AT:
        return query.order_by(order_func(InviteTask.updated_at))
    elif sort_by == TaskSortBy.NAME:
        return query.order_by(order_func(InviteTask.name))
    elif sort_by == TaskSortBy.PRIORITY:
        return query.order_by(order_func(InviteTask.priority))
    elif sort_by == TaskSortBy.STATUS:
        return query.order_by(order_func(InviteTask.status))
    elif sort_by == TaskSortBy.PROGRESS:
        # –í—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress = func.coalesce(
            (InviteTask.completed_count + InviteTask.failed_count) * 100.0 / 
            func.nullif(InviteTask.target_count, 0), 0
        )
        return query.order_by(order_func(progress))
    else:
        return query.order_by(desc(InviteTask.created_at))


@router.post("/", response_model=InviteTaskResponse)
async def create_invite_task(
    task_data: InviteTaskCreate,
    db: Session = Depends(get_db),
    user_id: int = Depends(get_current_user_id)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{task_data.name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"üìù –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {task_data.platform}")
        logger.info(f"üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: {task_data.settings}")
        if task_data.settings:
            settings_dict = task_data.settings.dict()
            logger.info(f"üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (dict): {settings_dict}")
            if 'group_id' in settings_dict and settings_dict['group_id']:
                logger.info(f"üìù group_id –Ω–∞–π–¥–µ–Ω: {settings_dict['group_id']}")
            else:
                logger.warning(f"‚ö†Ô∏è group_id –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ –ø—É—Å—Ç–æ–π! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(settings_dict.keys())}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã (settings=None)")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        task = InviteTask(
            user_id=user_id,
            name=task_data.name,
            description=task_data.description,
            platform=task_data.platform,
            priority=task_data.priority,
            invite_message=task_data.invite_message,
            scheduled_start=task_data.scheduled_start,
            settings=task_data.settings.dict() if task_data.settings else None
        )
        
        db.add(task)
        db.commit()
        db.refresh(task)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ID {task.id}: '{task.name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á–∏ {task.id}: {task.settings}")
        
        return task
        
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}"
        )


@router.get("/", response_model=TaskListResponse)
async def get_invite_tasks(
    # –§–∏–ª—å—Ç—Ä—ã
    status: Optional[List[TaskStatus]] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"),
    platform: Optional[List[str]] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º"),
    priority: Optional[List[TaskPriority]] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º"),
    created_after: Optional[datetime] = Query(None, description="–°–æ–∑–¥–∞–Ω—ã –ø–æ—Å–ª–µ –¥–∞—Ç—ã"),
    created_before: Optional[datetime] = Query(None, description="–°–æ–∑–¥–∞–Ω—ã –¥–æ –¥–∞—Ç—ã"),
    name_contains: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"),
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    page_size: int = Query(20, ge=1, le=100, description="–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sort_by: TaskSortBy = Query(TaskSortBy.CREATED_AT, description="–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
    sort_order: SortOrder = Query(SortOrder.DESC, description="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
    
    db: Session = Depends(get_db),
    user_id: int = Depends(get_current_user_id)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filters = TaskFilterSchema(
        status=status,
        platform=platform,
        priority=priority,
        created_after=created_after,
        created_before=created_before,
        name_contains=name_contains,
        page=page,
        page_size=page_size,
        sort_by=sort_by,
        sort_order=sort_order
    )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
    query = db.query(InviteTask)
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    query = apply_task_filters(query, filters, user_id)
    
    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    total = query.count()
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    query = apply_task_sorting(query, sort_by, sort_order)
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    offset = (page - 1) * page_size
    tasks = query.offset(offset).limit(page_size).all()
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    total_pages = math.ceil(total / page_size) if total > 0 else 1
    has_next = page < total_pages
    has_prev = page > 1
    
    return TaskListResponse(
        items=tasks,
        total=total,
        page=page,
        page_size=page_size,
        total_pages=total_pages,
        has_next=has_next,
        has_prev=has_prev
    )


@router.get("/{task_id}", response_model=InviteTaskResponse)
async def get_invite_task(
    task_id: int,
    db: Session = Depends(get_db),
    user_id: int = Depends(get_current_user_id)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
    
    task = db.query(InviteTask).filter(
        InviteTask.id == task_id,
        InviteTask.user_id == user_id  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    ).first()
    
    if not task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    return task


@router.put("/{task_id}", response_model=InviteTaskResponse)
async def update_invite_task(
    task_id: int,
    task_update: InviteTaskUpdate,
    db: Session = Depends(get_db),
    user_id: int = Depends(get_current_user_id)
):
    """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
    
    task = db.query(InviteTask).filter(
        InviteTask.id == task_id,
        InviteTask.user_id == user_id
    ).first()
    
    if not task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
    update_data = task_update.dict(exclude_unset=True)
    for field, value in update_data.items():
        if field == "settings" and value is not None:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è JSON –ø–æ–ª–µ–π
            setattr(task, field, value.dict() if hasattr(value, 'dict') else value)
        else:
            setattr(task, field, value)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    task.updated_at = datetime.utcnow()
    
    try:
        db.commit()
        db.refresh(task)
        return task
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}"
        )


@router.post("/{task_id}/duplicate", response_model=InviteTaskResponse)
async def duplicate_invite_task(
    task_id: int,
    duplicate_data: TaskDuplicateRequest,
    db: Session = Depends(get_db),
    user_id: int = Depends(get_current_user_id)
):
    """–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏
    original_task = db.query(InviteTask).filter(
        InviteTask.id == task_id,
        InviteTask.user_id == user_id
    ).first()
    
    if not original_task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏ –∑–∞–¥–∞—á–∏
        new_task = InviteTask(
            user_id=user_id,
            name=duplicate_data.new_name,
            description=f"–ö–æ–ø–∏—è: {original_task.description}" if original_task.description else None,
            platform=original_task.platform,
            priority=original_task.priority,
            invite_message=original_task.invite_message,
            settings=original_task.settings if duplicate_data.copy_settings else None,
            scheduled_start=None if duplicate_data.reset_schedule else original_task.scheduled_start,
            status=TaskStatus.PENDING  # –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤—Å–µ–≥–¥–∞ pending
        )
        
        db.add(new_task)
        db.commit()
        db.refresh(new_task)
        
        # TODO: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ copy_targets=True
        # –≠—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ endpoints –¥–ª—è targets
        
        return new_task
        
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}"
        )


@router.post("/bulk", response_model=dict)
async def bulk_task_operations(
    bulk_request: TaskBulkRequest,
    db: Session = Depends(get_db),
    user_id: int = Depends(get_current_user_id)
):
    """–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–∞–º–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    tasks = db.query(InviteTask).filter(
        InviteTask.id.in_(bulk_request.task_ids),
        InviteTask.user_id == user_id
    ).all()
    
    if len(tasks) != len(bulk_request.task_ids):
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
        )
    
    try:
        affected_count = 0
        
        if bulk_request.action == TaskBulkAction.DELETE:
            # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
            for task in tasks:
                db.delete(task)
                affected_count += 1
                
        elif bulk_request.action == TaskBulkAction.PAUSE:
            # –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á
            for task in tasks:
                if task.status in [TaskStatus.RUNNING, TaskStatus.PENDING]:
                    task.status = TaskStatus.PAUSED
                    affected_count += 1
                    
        elif bulk_request.action == TaskBulkAction.RESUME:
            # –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
            for task in tasks:
                if task.status == TaskStatus.PAUSED:
                    task.status = TaskStatus.PENDING
                    affected_count += 1
                    
        elif bulk_request.action == TaskBulkAction.CANCEL:
            # –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á
            for task in tasks:
                if task.status in [TaskStatus.RUNNING, TaskStatus.PENDING, TaskStatus.PAUSED]:
                    task.status = TaskStatus.CANCELLED
                    affected_count += 1
                    
        elif bulk_request.action == TaskBulkAction.SET_PRIORITY:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            new_priority = bulk_request.parameters.get("priority") if bulk_request.parameters else None
            if not new_priority or new_priority not in [p.value for p in TaskPriority]:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö"
                )
            
            for task in tasks:
                task.priority = TaskPriority(new_priority)
                affected_count += 1
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –∑–∞–¥–∞—á
        for task in tasks:
            task.updated_at = datetime.utcnow()
        
        db.commit()
        
        return {
            "message": f"–û–ø–µ—Ä–∞—Ü–∏—è '{bulk_request.action}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
            "affected_count": affected_count,
            "total_requested": len(bulk_request.task_ids)
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        )


@router.delete("/{task_id}")
async def delete_invite_task(
    task_id: int,
    db: Session = Depends(get_db),
    user_id: int = Depends(get_current_user_id)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
    
    task = db.query(InviteTask).filter(
        InviteTask.id == task_id,
        InviteTask.user_id == user_id
    ).first()
    
    if not task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    try:
        db.delete(task)
        db.commit()
        return {"message": f"–ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}"
        )


# =============================================================================
# –ù–û–í–´–ï ENDPOINTS –î–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–î–ê–ß –ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ü–õ–ê–¢–§–û–†–ú–ê–ú–ò
# =============================================================================

@router.post("/{task_id}/execute")
async def execute_invite_task(
    task_id: int,
    db: Session = Depends(get_db),
    user_id: int = Depends(get_current_user_id)
):
    """–ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
    
    task = db.query(InviteTask).filter(
        InviteTask.id == task_id,
        InviteTask.user_id == user_id
    ).first()
    
    if not task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ FAILED –∏ IN_PROGRESS –∑–∞–¥–∞—á
    if task.status not in [TaskStatus.PENDING, TaskStatus.PAUSED, TaskStatus.FAILED, TaskStatus.IN_PROGRESS]:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏: {task.status}"
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    target_count = db.query(InviteTarget).filter(InviteTarget.task_id == task_id).count()
    
    if target_count == 0:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"
        )
    
    try:
        # –ò–º–ø–æ—Ä—Ç Celery –∑–∞–¥–∞—á–∏
        from workers.invite_worker import execute_invite_task as celery_execute_task
        
        logger.info(f"üîç DIAGNOSTIC: About to queue Celery task for task_id={task_id}")
        
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ Celery
        result = celery_execute_task.delay(task_id)
        
        logger.info(f"üîç DIAGNOSTIC: Celery task queued successfully - task_id={task_id}, celery_id={result.id}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ enum –≤ –ë–î)
        task.status = TaskStatus.IN_PROGRESS.value
        task.start_time = datetime.utcnow()
        task.updated_at = datetime.utcnow()
        db.commit()
        
        logger.info(f"üîç DIAGNOSTIC: Task status updated to IN_PROGRESS for task_id={task_id}")
        
        return {
            "message": f"–ó–∞–¥–∞—á–∞ {task_id} –∑–∞–ø—É—â–µ–Ω–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
            "task_id": task_id,
            "celery_task_id": result.id,
            "status": "running",
            "started_at": task.start_time.isoformat()
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏: {str(e)}"
        )


@router.post("/{task_id}/pause")
async def pause_invite_task(
    task_id: int,
    db: Session = Depends(get_db),
    user_id: int = Depends(get_current_user_id)
):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    
    task = db.query(InviteTask).filter(
        InviteTask.id == task_id,
        InviteTask.user_id == user_id
    ).first()
    
    if not task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    if str(task.status) != TaskStatus.IN_PROGRESS.value and task.status != TaskStatus.IN_PROGRESS:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–ó–∞–¥–∞—á–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {task.status}"
        )
    
    try:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (–∑–Ω–∞—á–µ–Ω–∏–µ enum)
        task.status = TaskStatus.PAUSED.value
        task.updated_at = datetime.utcnow()
        db.commit()
        
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Celery –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        
        return {
            "message": f"–ó–∞–¥–∞—á–∞ {task_id} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
            "task_id": task_id,
            "status": "paused"
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏: {str(e)}"
        )


@router.get("/{task_id}/status")
async def get_task_status(
    task_id: int,
    db: Session = Depends(get_db),
    user_id: int = Depends(get_current_user_id)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    
    task = db.query(InviteTask).filter(
        InviteTask.id == task_id,
        InviteTask.user_id == user_id
    ).first()
    
    if not task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ü–µ–ª—è–º
    targets_stats = db.query(
        InviteTarget.status,
        func.count(InviteTarget.id).label('count')
    ).filter(
        InviteTarget.task_id == task_id
    ).group_by(InviteTarget.status).all()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å
    status_counts = {status.value: 0 for status in TargetStatus}
    for stat in targets_stats:
        status_counts[stat.status.value] = stat.count
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    total_targets = sum(status_counts.values())
    completed_targets = status_counts.get('invited', 0) + status_counts.get('failed', 0)
    progress_percentage = (completed_targets / total_targets * 100) if total_targets > 0 else 0
    
    # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    execution_time = None
    if task.start_time:
        end_time = task.end_time or datetime.utcnow()
        execution_time = (end_time - task.start_time).total_seconds()
    
    return {
        "task_id": task_id,
        "status": task.status.value,
        "progress_percentage": round(progress_percentage, 2),
        "targets": {
            "total": total_targets,
            "pending": status_counts.get('pending', 0),
            "invited": status_counts.get('invited', 0),
            "failed": status_counts.get('failed', 0)
        },
        "timing": {
            "created_at": task.created_at.isoformat(),
            "started_at": task.start_time.isoformat() if task.start_time else None,
            "ended_at": task.end_time.isoformat() if task.end_time else None,
            "execution_time_seconds": execution_time
        },
        "settings": task.settings,
        "error_message": task.error_message
    }


@router.get("/{task_id}/accounts")
async def get_task_available_accounts(
    task_id: int,
    db: Session = Depends(get_db),
    user_id: int = Depends(get_current_user_id)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    
    task = db.query(InviteTask).filter(
        InviteTask.id == task_id,
        InviteTask.user_id == user_id
    ).first()
    
    if not task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–∏—Ç—Ä–∏–Ω—É –∏–∑ Account Manager —Å —É—á–µ—Ç–æ–º –∫–∞–Ω–∞–ª–∞ –∑–∞–¥–∞—á–∏
        from app.clients.account_manager_client import AccountManagerClient
        am_client = AccountManagerClient()

        target_channel_id = None
        if task.settings and isinstance(task.settings, dict):
            target_channel_id = task.settings.get("group_id") or task.settings.get("channel_id")

        am_response = await am_client.get_accounts_summary(
            user_id=user_id,
            purpose="invite_campaign",
            target_channel_id=target_channel_id,
            limit=1000,
        )

        if not am_response or not am_response.get("success"):
            return {
                "task_id": task_id,
                "platform": task.platform,
                "total_accounts": 0,
                "active_accounts": 0,
                "available_now": 0,
                "accounts": [],
                "aggregates": {}
            }

        return {
            "task_id": task_id,
            "platform": task.platform,
            "total_accounts": am_response.get("total_accounts", 0),
            "active_accounts": am_response.get("active_accounts", 0),
            "available_now": am_response.get("available_now", 0),
            "accounts": am_response.get("accounts", []),
            "aggregates": am_response.get("aggregates", {})
        }
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Account Manager: {str(e)}"
        )


@router.post("/{task_id}/test-invite")
async def test_single_invite(
    task_id: int,
    target_id: int,
    account_id: Optional[int] = None,
    db: Session = Depends(get_db),
    user_id: int = Depends(get_current_user_id)
):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    
    task = db.query(InviteTask).filter(
        InviteTask.id == task_id,
        InviteTask.user_id == user_id
    ).first()
    
    if not task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ü–µ–ª–∏
    target = db.query(InviteTarget).filter(
        InviteTarget.id == target_id,
        InviteTarget.task_id == task_id
    ).first()
    
    if not target:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"–¶–µ–ª—å —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–¥–∞—á–µ {task_id}"
        )
    
    try:
        # –ò–º–ø–æ—Ä—Ç Celery –∑–∞–¥–∞—á–∏
        from workers.invite_worker import single_invite_operation
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        result = single_invite_operation.delay(task_id, target_id, account_id)
        
        return {
            "message": "–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ",
            "task_id": task_id,
            "target_id": target_id,
            "account_id": account_id,
            "celery_task_id": result.id
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {str(e)}"
        )
@router.post("/check-admin-rights")
async def check_admin_rights(
    request: dict,
    db: Session = Depends(get_db),
    user_id: int = Depends(get_current_user_id)
):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ
    """
    try:
        group_link = request.get("group_link", "").strip()
        if not group_link:
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª")
        
        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Account Manager (–±–µ–∑ –ø—Ä—è–º–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ Integration Service)
        from app.services.integration_client import get_integration_client
        from app.clients.account_manager_client import AccountManagerClient

        integration_client = get_integration_client()
        am_client = AccountManagerClient()

        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ Account Manager –¥–ª—è –≥—Ä—É–ø–ø—ã: {group_link}")

        ready_accounts = []
        unavailable_accounts = []
        admin_accounts_count = 0
        visited_accounts = set()

        # 1) –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä —á–µ—Ä–µ–∑ AM summary (—É—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –ª–∏–º–∏—Ç–æ–≤ –ø–æ —Ü–µ–ª–µ–≤–æ–º—É –ø–∞–±–ª–∏–∫—É)
        summary = await am_client.get_accounts_summary(
            user_id=user_id,
            # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –Ω–µ —Ç—Ä–µ–±—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä–æ–≥–∏–º –∏–Ω–≤–∞–π—Ç-–ª–∏–º–∏—Ç–∞–º
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –æ–±—â–∏–π purpose, —á—Ç–æ–±—ã –Ω–µ –æ—Ç—Å–µ—è—Ç—å –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –∑–∞—Ä–∞–Ω–µ–µ
            purpose="general",
            target_channel_id=group_link,
            limit=2000
        )

        candidate_ids = []
        if summary and summary.get("success"):
            for acc in summary.get("accounts", []):
                # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ê–î–ú–ò–ù-–ü–†–ê–í –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º per-channel –∏–Ω–≤–∞–π—Ç –ª–∏–º–∏—Ç—ã,
                # –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω/–∞–∫—Ç–∏–≤–µ–Ω.
                if acc.get("is_available", False) or acc.get("status") == "active":
                    candidate_ids.append(acc.get("account_id"))

        logger.info(f"üîç –ü—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä AM: –Ω–∞–π–¥–µ–Ω–æ {len(candidate_ids)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤")

        # 2) –¢–æ—á–µ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞–ª–ª–æ—Ü–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ preferred_account_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∏ —Ä–µ–ª–∏–∑–∏–º
        for preferred_id in candidate_ids:
            allocation = await am_client.allocate_account(
                user_id=user_id,
                purpose="check_admin_rights",
                preferred_account_id=preferred_id,
                timeout_minutes=5
            )

            if not allocation:
                # –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç (–∑–∞–Ω—è—Ç/–Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                continue

            account_id = allocation.get("account_id")
            username = allocation.get("phone") or f"Account_{(account_id or '')[:8]}"

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            if account_id in visited_accounts:
                await am_client.release_account(account_id=account_id, usage_stats={
                    "invites_sent": 0,
                    "messages_sent": 0,
                    "contacts_added": 0,
                    "channels_used": [group_link],
                    "success": True,
                    "error_type": None,
                    "error_message": None
                })
                continue

            visited_accounts.add(account_id)

            try:
                is_admin, permissions = await integration_client.check_admin_rights(account_id, group_link)
                if is_admin:
                    admin_accounts_count += 1
                    ready_accounts.append({
                        "account_id": account_id,
                        "username": username,
                        "status": "ready",
                        "permissions": permissions
                    })
                else:
                    unavailable_accounts.append({
                        "account_id": account_id,
                        "username": username,
                        "status": "not_admin",
                        "reason": "no_admin_permissions",
                        "permissions": permissions
                    })
            except Exception as check_error:
                unavailable_accounts.append({
                    "account_id": account_id,
                    "username": username,
                    "status": "error",
                    "reason": str(check_error),
                    "permissions": []
                })
            finally:
                try:
                    await am_client.release_account(account_id=account_id, usage_stats={
                        "invites_sent": 0,
                        "messages_sent": 0,
                        "contacts_added": 0,
                        "channels_used": [group_link],
                        "success": True,
                        "error_type": None,
                        "error_message": None
                    })
                except Exception as release_err:
                    logger.debug(f"Release account error: {release_err}")

        # 3) Fallback: –µ—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ summary –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –æ–±—â–∏–π –∞–ª–ª–æ–∫–µ–π—Ç –±–µ–∑ preferred_id (AM –º–æ–∂–µ—Ç —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–ª—è —Ü–µ–ª–∏ check_admin_rights)
        if admin_accounts_count == 0 and not candidate_ids:
            logger.info("‚ÑπÔ∏è Fallback: summary –Ω–µ –¥–∞–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –æ–±—â–∏–π –∞–ª–ª–æ–∫–µ–π—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤")
            visited_accounts_fallback = set()
            max_attempts = 50
            attempts = 0
            while attempts < max_attempts:
                attempts += 1
                allocation = await am_client.allocate_account(
                    user_id=user_id,
                    purpose="check_admin_rights",
                    timeout_minutes=5
                )
                if not allocation:
                    break

                account_id = allocation.get("account_id")
                username = allocation.get("phone") or f"Account_{(account_id or '')[:8]}"

                if account_id in visited_accounts_fallback:
                    # —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏ –≤ —ç—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–µ
                    try:
                        await am_client.release_account(account_id=account_id, usage_stats={
                            "invites_sent": 0,
                            "messages_sent": 0,
                            "contacts_added": 0,
                            "channels_used": [group_link],
                            "success": True,
                            "error_type": None,
                            "error_message": None
                        })
                    except Exception:
                        pass
                    break

                visited_accounts_fallback.add(account_id)

                try:
                    is_admin, permissions = await integration_client.check_admin_rights(account_id, group_link)
                    if is_admin:
                        admin_accounts_count += 1
                        ready_accounts.append({
                            "account_id": account_id,
                            "username": username,
                            "status": "ready",
                            "permissions": permissions
                        })
                    else:
                        unavailable_accounts.append({
                            "account_id": account_id,
                            "username": username,
                            "status": "not_admin",
                            "reason": "no_admin_permissions",
                            "permissions": permissions
                        })
                except Exception as check_error:
                    unavailable_accounts.append({
                        "account_id": account_id,
                        "username": username,
                        "status": "error",
                        "reason": str(check_error),
                        "permissions": []
                    })
                finally:
                    try:
                        await am_client.release_account(account_id=account_id, usage_stats={
                            "invites_sent": 0,
                            "messages_sent": 0,
                            "contacts_added": 0,
                            "channels_used": [group_link],
                            "success": True,
                            "error_type": None,
                            "error_message": None
                        })
                    except Exception:
                        pass

        # –û—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–ø–æ –¢–ó AM: 15 –∏–Ω–≤–∞–π—Ç–æ–≤/–¥–µ–Ω—å –Ω–∞ –ø–∞–±–ª–∏–∫ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç)
        estimated_capacity = admin_accounts_count * 15
        total_checked = len(ready_accounts) + len(unavailable_accounts)

        return {
            "group_link": group_link,
            "group_name": group_link.split('/')[-1].replace('@', ''),
            "total_accounts_checked": total_checked,
            "admin_accounts": admin_accounts_count,
            "ready_accounts": ready_accounts,
            "unavailable_accounts": unavailable_accounts,
            "can_proceed": admin_accounts_count > 0,
            "estimated_capacity": estimated_capacity
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤: {e}")
        raise HTTPException(status_code=500, detail=f"Error checking admin rights: {str(e)}")


# Utility functions 