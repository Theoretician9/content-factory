"""
API endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
"""

from fastapi import APIRouter, Depends, HTTPException, status
from typing import List, Dict, Any
import httpx
import logging
import jwt
from datetime import datetime, timedelta
import traceback

from app.core.config import settings
from app.core.auth import get_current_user_id

router = APIRouter()
logger = logging.getLogger(__name__)


async def get_jwt_token_for_parsing_service() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Parsing Service"""
    try:
        from app.core.vault import get_vault_client
        
        logger.info("üîç DIAGNOSTIC: Getting JWT token for parsing service")
        
        vault_client = get_vault_client()
        secret_data = vault_client.get_secret("jwt")
        
        logger.info(f"üîç DIAGNOSTIC: Secret data received: {bool(secret_data)}")
        
        if not secret_data or 'secret_key' not in secret_data:
            logger.error("‚ùå DIAGNOSTIC: JWT secret not found in Vault")
            raise Exception("JWT secret not found in Vault")
        
        logger.info(f"üîç DIAGNOSTIC: JWT secret key length: {len(secret_data['secret_key'])}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è invite-service
        payload = {
            'service': 'invite-service',
            'user_id': 1,  # –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–æ–∫–µ–Ω
            'exp': int((datetime.utcnow() + timedelta(hours=1)).timestamp())
        }
        
        logger.info(f"üîç DIAGNOSTIC: JWT payload: {payload}")
        
        token = jwt.encode(payload, secret_data['secret_key'], algorithm='HS256')
        
        logger.info(f"üîç DIAGNOSTIC: JWT token created, length: {len(token)}")
        logger.info(f"üîç DIAGNOSTIC: JWT token preview: {token[:50]}...")
        
        return token
        
    except Exception as e:
        logger.error(f"‚ùå DIAGNOSTIC: Error getting JWT token for parsing service: {e}")
        logger.error(f"‚ùå DIAGNOSTIC: JWT token traceback: {traceback.format_exc()}")
        raise


@router.get("/", response_model=List[Dict[str, Any]])
async def get_parsing_tasks(user_id: int = Depends(get_current_user_id)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    """
    try:
        logger.info(f"üîç DIAGNOSTIC: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        logger.info("üîç DIAGNOSTIC: –ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞...")
        token = await get_jwt_token_for_parsing_service()
        logger.info("üîç DIAGNOSTIC: JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ó–∞–ø—Ä–æ—Å –∫ parsing-service —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ user_id
        logger.info(f"üîç DIAGNOSTIC: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {settings.PARSING_SERVICE_URL}/api/v1/results/grouped")
        logger.info(f"üîç DIAGNOSTIC: Headers: Authorization: Bearer {token[:50]}...")
        logger.info(f"üîç DIAGNOSTIC: Params: user_id={user_id}")
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(
                f"{settings.PARSING_SERVICE_URL}/api/v1/results/grouped",
                headers={"Authorization": f"Bearer {token}"},
                params={"user_id": user_id}
            )
            
            logger.info(f"üîç DIAGNOSTIC: –û—Ç–≤–µ—Ç –æ—Ç parsing-service: status={response.status_code}")
            logger.info(f"üîç DIAGNOSTIC: Response headers: {dict(response.headers)}")
            
            if response.status_code == 200:
                logger.info("üîç DIAGNOSTIC: –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–∞—Ä—Å–∏–Ω–≥ JSON...")
                data = response.json()
                logger.info(f"üîç DIAGNOSTIC: JSON data keys: {list(data.keys())}")
                
                tasks = data.get("tasks", [])
                logger.info(f"üîç DIAGNOSTIC: –ü–æ–ª—É—á–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –∏–∑ parsing-service")
                
                if tasks:
                    logger.info(f"üîç DIAGNOSTIC: –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏: {tasks[0]}")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
                formatted_tasks = []
                for i, task in enumerate(tasks):
                    logger.debug(f"üîç DIAGNOSTIC: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ {i+1}: {task.get('task_id')}")
                    
                    if task.get("total_results", 0) > 0:  # –¢–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                        formatted_task = {
                            "id": task.get("task_id"),
                            "platform": task.get("platform", "telegram"),
                            "status": task.get("status", "completed"),
                            "target_url": task.get("target_url", ""),
                            "title": task.get("title", ""),
                            "total_results": task.get("total_results", 0),
                            "created_at": task.get("created_at"),
                            "can_import": True
                        }
                        formatted_tasks.append(formatted_task)
                        logger.debug(f"üîç DIAGNOSTIC: –ó–∞–¥–∞—á–∞ {i+1} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    else:
                        logger.debug(f"üîç DIAGNOSTIC: –ó–∞–¥–∞—á–∞ {i+1} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)")
                
                logger.info(f"üîç DIAGNOSTIC: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(formatted_tasks)} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
                return formatted_tasks
                
            else:
                logger.error(f"‚ùå DIAGNOSTIC: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ parsing-service: {response.status_code}")
                logger.error(f"‚ùå DIAGNOSTIC: Response body: {response.text}")
                logger.error(f"‚ùå DIAGNOSTIC: Response headers: {dict(response.headers)}")
                return []
        
    except httpx.TimeoutException as e:
        logger.error(f"‚ùå DIAGNOSTIC: Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ parsing-service: {e}")
        return []
    except httpx.ConnectError as e:
        logger.error(f"‚ùå DIAGNOSTIC: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å parsing-service: {e}")
        return []
    except Exception as e:
        logger.error(f"‚ùå DIAGNOSTIC: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
        logger.error(f"‚ùå DIAGNOSTIC: Full traceback: {traceback.format_exc()}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∏
        return []


@router.get("/{task_id}/preview", response_model=Dict[str, Any])
async def preview_parsing_task_data(
    task_id: str,
    limit: int = 10,
    user_id: int = Depends(get_current_user_id)
):
    """
    –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    try:
        logger.info(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        token = await get_jwt_token_for_parsing_service()
        
        # –ó–∞–ø—Ä–æ—Å –∫ parsing-service –∑–∞ –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{settings.PARSING_SERVICE_URL}/api/v1/results/{task_id}",
                headers={"Authorization": f"Bearer {token}"},
                params={
                    "user_id": user_id,
                    "limit": limit,
                    "offset": 0
                }
            )
            
            if response.status_code == 200:
                data = response.json()
                results = data.get("results", [])
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                preview_data = {
                    "task_id": task_id,
                    "total_available": data.get("total", 0),
                    "preview_count": len(results),
                    "sample_contacts": []
                }
                
                for result in results:
                    platform_data = result.get("platform_specific_data", {})
                    contact = {
                        "username": result.get("username"),
                        "display_name": result.get("display_name"),
                        "phone": result.get("author_phone"),
                        "platform_id": result.get("platform_id"),
                        "first_name": platform_data.get("first_name"),
                        "last_name": platform_data.get("last_name"),
                        "chat_title": platform_data.get("chat_title")
                    }
                    preview_data["sample_contacts"].append(contact)
                
                return preview_data
                
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ {task_id}: {response.status_code}")
                raise HTTPException(
                    status_code=response.status_code,
                    detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {response.text}"
                )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–¥–∞—á–∏ {task_id}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        )


@router.get("/{task_id}")
async def get_parsing_task_details(task_id: str, user_id: int = Depends(get_current_user_id)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        try:
            token = await get_jwt_token_for_parsing_service()
        except Exception as e:
            logger.warning(f"Failed to get JWT token: {e}. Using fallback data.")
            return await _get_fallback_task_details(task_id, user_id)
        
        parsing_service_url = "http://parsing-service:8000"
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
                response = await client.get(
                    f"{parsing_service_url}/tasks/{task_id}",
                    headers={"Authorization": f"Bearer {token}"}
                )
                
                if response.status_code == 200:
                    task_data = response.json()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    if task_data.get('user_id') != user_id:
                        raise HTTPException(
                            status_code=status.HTTP_404_NOT_FOUND,
                            detail="Task not found"
                        )
                    
                    # –ü–æ–ª—É—á–∞–µ–º preview —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    results_preview = []
                    try:
                        results_response = await client.get(
                            f"{parsing_service_url}/results/{task_id}?limit=5",
                            headers={"Authorization": f"Bearer {token}"}
                        )
                        if results_response.status_code == 200:
                            results_data = results_response.json()
                            for result in results_data.get('results', [])[:5]:
                                results_preview.append({
                                    "username": result.get('username', ''),
                                    "first_name": result.get('display_name', '').split()[0] if result.get('display_name') else '',
                                    "last_name": ' '.join(result.get('display_name', '').split()[1:]) if result.get('display_name') else '',
                                    "phone": result.get('author_phone', '')
                                })
                    except Exception as e:
                        logger.warning(f"Could not get results preview: {e}")
                    
                    return {
                        "id": task_data.get('task_id', task_id),
                        "platform": task_data.get('platform', 'telegram'),
                        "status": task_data.get('status'),
                        "result_count": task_data.get('result_count', 0),
                        "created_at": task_data.get('created_at'),
                        "completed_at": task_data.get('completed_at'),
                        "link": task_data.get('target_link', task_data.get('link')),
                        "task_type": task_data.get('task_type', 'channel_members'),
                        "title": task_data.get('title', task_data.get('channel_name')),
                        "description": task_data.get('description'),
                        "results_preview": results_preview,
                        "statistics": {
                            "total_found": task_data.get('result_count', 0),
                            "with_username": len([r for r in results_preview if r.get('username')]),
                            "with_phone": len([r for r in results_preview if r.get('phone')]),
                            "active_users": task_data.get('result_count', 0),
                            "bots": 0
                        }
                    }
                
                elif response.status_code == 404:
                    raise HTTPException(status_code=404, detail="Task not found")
                else:
                    logger.warning(f"Parsing service returned {response.status_code}")
                    return await _get_fallback_task_details(task_id, user_id)
                    
            except httpx.TimeoutException:
                logger.warning("Timeout connecting to parsing-service")
                return await _get_fallback_task_details(task_id, user_id)
            except httpx.ConnectError:
                logger.warning("Cannot connect to parsing-service")
                return await _get_fallback_task_details(task_id, user_id)
                
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting task details: {str(e)}")
        return await _get_fallback_task_details(task_id, user_id)


async def _get_fallback_task_details(task_id: str, user_id: int) -> Dict[str, Any]:
    """Fallback –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏"""
    return {
        "id": task_id,
        "platform": "telegram", 
        "status": "completed",
        "result_count": 156,
        "created_at": "2025-01-30T10:30:00Z",
        "completed_at": "2025-01-30T10:45:00Z",
        "link": "https://t.me/rflive",
        "task_type": "channel_members",
        "title": "RFLive Test Channel (fallback)",
        "description": "Fallback –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
        "results_preview": [
            {
                "username": "@test_user1",
                "first_name": "Test",
                "last_name": "User1", 
                "phone": "+1234567890"
            }
        ],
        "statistics": {
            "total_found": 156,
            "with_username": 120,
            "with_phone": 85,
            "active_users": 140,
            "bots": 5
        }
    }


@router.get("/{task_id}/download")
async def download_parsing_results(task_id: str, user_id: int = Depends(get_current_user_id)):
    """–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"""
    logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞–¥–∞—á–µ —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª–∏
    task_details = await get_parsing_task_details(task_id, user_id)
    
    return {
        "task_id": task_id,
        "download_url": f"/api/v1/parsing-tasks/{task_id}/data",
        "format": "json",
        "size": f"{task_details.get('result_count', 0) * 0.1:.0f}KB",
        "expires_at": "2025-01-31T10:30:00Z"
    } 