"""
Telegram Platform Adapter –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ Integration Service
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å Account Manager –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
import httpx

from .base import (
    InvitePlatformAdapter,
    PlatformAccount,
    InviteResult,
    RateLimitStatus,
    InviteResultStatus,
    AccountStatus
)
from app.services.integration_client import IntegrationServiceClient
from app.clients.account_manager_client import AccountManagerClient

logger = logging.getLogger(__name__)


class TelegramInviteAdapter(InvitePlatformAdapter):
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ Telegram —á–µ—Ä–µ–∑ Integration Service
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å Account Manager –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    """
    
    def __init__(self):
        super().__init__("telegram")
        self.integration_client = IntegrationServiceClient()
        self.account_manager = AccountManagerClient()
        self.allocated_accounts = {}  # –ö—ç—à –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã Telegram (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç Account Manager)
        self.default_limits = {
            "daily_invite_limit": 30,      # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Account Manager
            "daily_message_limit": 30,     # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Account Manager
            "hourly_invite_limit": 2,      # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Account Manager
            "per_channel_daily_limit": 15, # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Account Manager
            "max_per_channel_total": 200,  # –ú–∞–∫—Å–∏–º—É–º –Ω–∞ –∫–∞–Ω–∞–ª —Å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            "flood_wait_buffer": 300       # 5 –º–∏–Ω—É—Ç –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ flood wait
        }
    
    async def initialize_accounts(self, user_id: int) -> List[PlatformAccount]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Account Manager"""
        
        try:
            logger.info(f"üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ Account Manager")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            accounts_data = await self.integration_client.get_user_accounts(
                user_id=user_id,
                platform="telegram"
            )
            
            # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç integration-service
            logger.info(f"üîç –û—Ç–≤–µ—Ç –æ—Ç integration-service: {len(accounts_data) if accounts_data else 0} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            if accounts_data:
                for i, acc in enumerate(accounts_data):
                    logger.info(f"üîç   –°—ã—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç {i+1}: {acc}")
            
            if not accounts_data:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return []
            
            platform_accounts = []
            
            for acc_data in accounts_data:
                # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {acc_data.get('id')}: is_active='{acc_data.get('is_active')}', username='{acc_data.get('username')}', phone='{acc_data.get('phone')}'")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ PlatformAccount —Å –ª–∏–º–∏—Ç–∞–º–∏ Account Manager
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º is_active –≤–º–µ—Å—Ç–æ status
                is_active = acc_data.get("is_active", False)
                account_status = AccountStatus.ACTIVE if is_active else AccountStatus.INACTIVE
                
                logger.info(f"üîç –ê–∫–∫–∞—É–Ω—Ç {acc_data.get('id')}: is_active='{is_active}' -> account_status={account_status}")
                
                account = PlatformAccount(
                    account_id=acc_data["id"],
                    username=acc_data.get("username"),
                    phone=acc_data.get("phone"),
                    status=account_status,
                    platform="telegram",
                    
                    # –õ–∏–º–∏—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç Account Manager
                    daily_invite_limit=self.default_limits["daily_invite_limit"],
                    daily_message_limit=self.default_limits["daily_message_limit"],
                    hourly_invite_limit=self.default_limits["hourly_invite_limit"],
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    last_activity=acc_data.get("last_activity"),
                    extra_data={
                        "first_name": acc_data.get("first_name"),
                        "last_name": acc_data.get("last_name"),
                        "created_at": acc_data.get("created_at"),
                        "user_id": user_id  # –î–ª—è Account Manager
                    }
                )
                
                # TODO: –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —á–µ—Ä–µ–∑ Account Manager
                # —Ç.–∫. endpoint /health/{account_id} –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
                # health_status = await self.account_manager.get_account_health(str(account.account_id))
                # if health_status:
                #     if not health_status.get("is_healthy", True):
                #         account.status = AccountStatus.INACTIVE
                #         logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account.account_id} –Ω–µ–∑–¥–æ—Ä–æ–≤: {health_status.get('issues', [])}")
                
                platform_accounts.append(account)
            
            # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            logger.info(f"üîç –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ {len(platform_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ PlatformAccount:")
            for i, acc in enumerate(platform_accounts):
                logger.info(f"üîç   –ê–∫–∫–∞—É–Ω—Ç {i+1}: id={acc.account_id}, status={acc.status}, username={acc.username}")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            active_accounts = [acc for acc in platform_accounts if acc.status == AccountStatus.ACTIVE]
            
            # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            logger.info(f"üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(active_accounts)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:")
            for i, acc in enumerate(active_accounts):
                logger.info(f"üîç   –ê–∫—Ç–∏–≤–Ω—ã–π {i+1}: id={acc.account_id}, username={acc.username}")
            
            # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å AccountStatus.ACTIVE
            logger.info(f"üîç AccountStatus.ACTIVE = {AccountStatus.ACTIVE}")
            
            logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã Telegram –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(active_accounts)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∑ {len(platform_accounts)}")
            
            return active_accounts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            raise
    
    async def validate_target(self, target_data: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ü–µ–ª–∏ –¥–ª—è Telegram –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª—å –∏–º–µ–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        username = target_data.get("username")
        phone = target_data.get("phone_number")
        user_id = target_data.get("user_id_platform")
        
        # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        logger.info(f"üîç DIAGNOSTIC: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–∏:")
        logger.info(f"üîç DIAGNOSTIC:   username: {repr(username)} (empty: {not username or not str(username).strip()})")
        logger.info(f"üîç DIAGNOSTIC:   phone_number: {repr(phone)} (empty: {not phone or not str(phone).strip()})")
        logger.info(f"üîç DIAGNOSTIC:   user_id_platform: {repr(user_id)} (empty: {not user_id or not str(user_id).strip()})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–µ–ø—É—Å—Ç–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        has_valid_username = username and str(username).strip()
        has_valid_phone = phone and str(phone).strip()
        has_valid_user_id = user_id and str(user_id).strip()
        
        logger.info(f"üîç DIAGNOSTIC:   has_valid_username: {has_valid_username}")
        logger.info(f"üîç DIAGNOSTIC:   has_valid_phone: {has_valid_phone}")
        logger.info(f"üîç DIAGNOSTIC:   has_valid_user_id: {has_valid_user_id}")
        logger.info(f"üîç DIAGNOSTIC:   any valid identifier: {any([has_valid_username, has_valid_phone, has_valid_user_id])}")
        
        # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not any([has_valid_username, has_valid_phone, has_valid_user_id]):
            logger.warning("–¶–µ–ª—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è Telegram –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
            return False
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        if username and not isinstance(username, str):
            logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username")
            return False
            
        if phone and not isinstance(phone, str):
            logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç phone_number")
            return False
            
        if user_id and not isinstance(user_id, str):
            logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id_platform")
            return False
        
        logger.debug(f"–¶–µ–ª—å –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é: username={username}, phone={phone}, user_id={user_id}")
        return True
    
    async def send_invite(
        self,
        account: PlatformAccount,
        target: Dict[str, Any],
        invite_data: Dict[str, Any]
    ) -> InviteResult:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ Integration Service"""
        
        start_time = datetime.utcnow()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if not account.can_send_invite():
            return InviteResult(
                status=InviteResultStatus.RATE_LIMITED,
                error_message="–ê–∫–∫–∞—É–Ω—Ç –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π",
                account_id=account.account_id,
                can_retry=True,
                retry_after=self._calculate_retry_time(account)
            )
        
        try:
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ü–µ–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            target_username = target.get("username")
            target_phone = target.get("phone_number")
            target_user_id = target.get("user_id_platform")
            
            // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–ª–∏
            logger.info(f"üîç DIAGNOSTIC: –ü–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏ –ø–µ—Ä–µ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π:")
            logger.info(f"üîç DIAGNOSTIC:   username: {repr(target_username)} (type: {type(target_username)})")
            logger.info(f"üîç DIAGNOSTIC:   phone_number: {repr(target_phone)} (type: {type(target_phone)})")
            logger.info(f"üîç DIAGNOSTIC:   user_id_platform: {repr(target_user_id)} (type: {type(target_user_id)})")
            logger.info(f"üîç DIAGNOSTIC:   any identifiers: {any([target_username, target_phone, target_user_id])}")
            
            // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            if not any([target_username, target_phone, target_user_id]):
                error_msg = "–¶–µ–ª—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ (username, phone_number –∏–ª–∏ user_id_platform)"
                logger.error(f"‚ùå {error_msg}")
                return InviteResult(
                    status=InviteResultStatus.FAILED,
                    error_message=error_msg,
                    account_id=account.account_id,
                    can_retry=False
                )
            
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Integration Service
            telegram_invite_data = {
                "invite_type": invite_data.get("invite_type", "group_invite"),
                "target_username": target_username,
                "target_phone": target_phone,
                "target_user_id": target_user_id,
                "group_id": invite_data.get("group_id"),
                "message": invite_data.get("message"),
                "parse_mode": invite_data.get("parse_mode", "text"),
                "silent": invite_data.get("silent", False)
            }
            
            // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –≤ Integration Service
            logger.info(f"üîç DIAGNOSTIC: –î–∞–Ω–Ω—ã–µ –¥–ª—è Integration Service:")
            for key, value in telegram_invite_data.items():
                logger.info(f"üîç DIAGNOSTIC:   {key}: {repr(value)}")
            
            // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ –ø–æ–ª–µ–π target_* –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
            target_fields = [target_username, target_phone, target_user_id]
            if not any(field is not None and str(field).strip() for field in target_fields):
                error_msg = "–¶–µ–ª—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"
                logger.error(f"‚ùå {error_msg}")
                logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏: username={repr(target_username)}, phone={repr(target_phone)}, user_id={repr(target_user_id)}")
                return InviteResult(
                    status=InviteResultStatus.FAILED,
                    error_message=error_msg,
                    account_id=account.account_id,
                    can_retry=False
                )
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Integration Service
            response = await self.integration_client.send_telegram_invite(
                account_id=account.account_id,
                invite_data=telegram_invite_data
            )
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            end_time = datetime.utcnow()
            execution_time = (end_time - start_time).total_seconds()
            
            result = InviteResult(
                status=InviteResultStatus.SUCCESS,
                message="–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
                message_id=response.get("message_id"),
                target_username=target.get("username"),
                target_phone=target.get("phone_number"),
                sent_at=end_time,
                execution_time=execution_time,
                account_id=account.account_id,
                platform_response=response
            )
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
            await self.update_account_stats(account, result)
            
            return result
            
        except httpx.HTTPStatusError as e:
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫ –æ—Ç Integration Service
            return await self._handle_integration_service_error(e, account, start_time)
            
        except Exception as e:
            // –û–±—â–∏–µ –æ—à–∏–±–∫–∏
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {str(e)}")
            return InviteResult(
                status=InviteResultStatus.NETWORK_ERROR,
                error_message=f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}",
                account_id=account.account_id,
                execution_time=(datetime.utcnow() - start_time).total_seconds(),
                can_retry=True
            )
    
    async def send_message(
        self,
        account: PlatformAccount,
        target: Dict[str, Any],
        message_data: Dict[str, Any]
    ) -> InviteResult:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Integration Service"""
        
        start_time = datetime.utcnow()
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if not account.can_send_message():
            return InviteResult(
                status=InviteResultStatus.RATE_LIMITED,
                error_message="–ê–∫–∫–∞—É–Ω—Ç –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π",
                account_id=account.account_id,
                can_retry=True,
                retry_after=self._calculate_retry_time(account)
            )
        
        try:
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            telegram_message_data = {
                "target_entity": target.get("username") or target.get("phone_number") or target.get("user_id_platform"),
                "message": message_data.get("message"),
                "parse_mode": message_data.get("parse_mode", "text"),
                "silent": message_data.get("silent", False),
                "reply_to_message_id": message_data.get("reply_to_message_id")
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Integration Service
            response = await self.integration_client.send_telegram_message(
                account_id=account.account_id,
                message_data=telegram_message_data
            )
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            end_time = datetime.utcnow()
            execution_time = (end_time - start_time).total_seconds()
            
            result = InviteResult(
                status=InviteResultStatus.SUCCESS,
                message="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
                message_id=response.get("message_id"),
                target_username=target.get("username"),
                target_phone=target.get("phone_number"),
                sent_at=end_time,
                execution_time=execution_time,
                account_id=account.account_id,
                platform_response=response
            )
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            account.daily_messages_used += 1
            account.last_activity = datetime.utcnow()
            
            return result
            
        except httpx.HTTPStatusError as e:
            return await self._handle_integration_service_error(e, account, start_time)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return InviteResult(
                status=InviteResultStatus.NETWORK_ERROR,
                error_message=f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}",
                account_id=account.account_id,
                execution_time=(datetime.utcnow() - start_time).total_seconds(),
                can_retry=True
            )
    
    async def check_rate_limits(self, account: PlatformAccount) -> RateLimitStatus:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö rate limits —á–µ—Ä–µ–∑ Integration Service"""
        
        try:
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ Integration Service
            limits_data = await self.integration_client.get_account_limits(account.account_id)
            
            current_usage = limits_data.get("current_usage", {})
            limits = limits_data.get("limits", {})
            
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ª–∏–º–∏—Ç–æ–≤
            invites_remaining_daily = max(0, limits.get("daily_invites", 50) - current_usage.get("daily_invites_used", 0))
            invites_remaining_hourly = max(0, limits.get("hourly_invites", 5) - current_usage.get("hourly_invites_used", 0))
            messages_remaining_daily = max(0, limits.get("daily_messages", 40) - current_usage.get("daily_messages_used", 0))
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ flood wait
            flood_wait_until = None
            restrictions = limits_data.get("restrictions", [])
            
            if limits.get("flood_wait_active"):
                flood_wait_until = datetime.utcnow() + timedelta(seconds=self.default_limits["flood_wait_buffer"])
            
            return RateLimitStatus(
                can_send_invite=invites_remaining_daily > 0 and invites_remaining_hourly > 0 and not flood_wait_until,
                can_send_message=messages_remaining_daily > 0 and not flood_wait_until,
                invites_remaining_daily=invites_remaining_daily,
                invites_remaining_hourly=invites_remaining_hourly,
                messages_remaining_daily=messages_remaining_daily,
                daily_reset_at=datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1),
                hourly_reset_at=datetime.utcnow().replace(minute=0, second=0, microsecond=0) + timedelta(hours=1),
                flood_wait_until=flood_wait_until,
                restrictions=restrictions
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limits –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.account_id}: {str(e)}")
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return RateLimitStatus(
                can_send_invite=True,
                can_send_message=True,
                invites_remaining_daily=0,  // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ
                invites_remaining_hourly=0,
                messages_remaining_daily=0,
                daily_reset_at=datetime.utcnow() + timedelta(days=1),
                hourly_reset_at=datetime.utcnow() + timedelta(hours=1),
                restrictions=["rate_check_failed"]
            )
    
    async def _handle_integration_service_error(
        self,
        error: httpx.HTTPStatusError,
        account: PlatformAccount,
        start_time: datetime
    ) -> InviteResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç Integration Service"""
        
        execution_time = (datetime.utcnow() - start_time).total_seconds()
        
        try:
            error_data = error.response.json()
        except:
            error_data = {"detail": str(error)}
        
        if error.response.status_code == 429:
            // Rate limiting –∏–ª–∏ Flood Wait
            detail = error_data.get("detail", {})
            
            if isinstance(detail, dict):
                if detail.get("error") == "flood_wait":
                    // Telegram FloodWait
                    seconds = detail.get("seconds", 300)
                    retry_after = datetime.utcnow() + timedelta(seconds=seconds + self.default_limits["flood_wait_buffer"])
                    
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                    account.flood_wait_until = retry_after
                    account.status = AccountStatus.FLOOD_WAIT
                    
                    return InviteResult(
                        status=InviteResultStatus.FLOOD_WAIT,
                        error_message=f"Telegram FloodWait: {seconds} —Å–µ–∫—É–Ω–¥",
                        error_code="flood_wait",
                        retry_after=retry_after,
                        execution_time=execution_time,
                        account_id=account.account_id,
                        can_retry=True
                    )
                
                elif detail.get("error") == "peer_flood":
                    // PeerFlood - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    account.status = AccountStatus.RATE_LIMITED
                    
                    return InviteResult(
                        status=InviteResultStatus.PEER_FLOOD,
                        error_message="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                        error_code="peer_flood",
                        retry_after=datetime.utcnow() + timedelta(hours=24),
                        execution_time=execution_time,
                        account_id=account.account_id,
                        can_retry=False  // PeerFlood –æ–±—ã—á–Ω–æ –Ω–∞ –¥–æ–ª–≥–æ
                    )
            
            // –û–±—â–∏–π rate limiting
            return InviteResult(
                status=InviteResultStatus.RATE_LIMITED,
                error_message="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
                error_code="rate_limited",
                retry_after=datetime.utcnow() + timedelta(hours=1),
                execution_time=execution_time,
                account_id=account.account_id,
                can_retry=True
            )
        
        elif error.response.status_code == 403:
            // Privacy restrictions
            detail = error_data.get("detail", {})
            
            if isinstance(detail, dict) and detail.get("error") == "privacy_restricted":
                return InviteResult(
                    status=InviteResultStatus.PRIVACY_RESTRICTED,
                    error_message="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–µ—â–∞—é—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
                    error_code="privacy_restricted",
                    execution_time=execution_time,
                    account_id=account.account_id,
                    can_retry=False
                )
        
        elif error.response.status_code == 400:
            // Bad request - —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
            detail = error_data.get("detail", {})
            
            if isinstance(detail, dict):
                error_type = detail.get("error", "unknown")
                
                if error_type == "not_mutual_contact":
                    return InviteResult(
                        status=InviteResultStatus.NOT_MUTUAL_CONTACT,
                        error_message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö",
                        error_code="not_mutual_contact",
                        execution_time=execution_time,
                        account_id=account.account_id,
                        can_retry=False
                    )
        
        // –û–±—â–∞—è –æ—à–∏–±–∫–∞
        return InviteResult(
            status=InviteResultStatus.FAILED,
            error_message=f"–û—à–∏–±–∫–∞ Integration Service: {error_data.get('detail', str(error))}",
            error_code=f"http_{error.response.status_code}",
            execution_time=execution_time,
            account_id=account.account_id,
            can_retry=error.response.status_code >= 500  // –†–µ—Ç—Ä–∞–π —Ç–æ–ª—å–∫–æ –¥–ª—è server errors
        )
    
    def _calculate_retry_time(self, account: PlatformAccount) -> datetime:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
        
        if account.flood_wait_until:
            return account.flood_wait_until
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç - –∂–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
        if account.daily_invites_used >= account.daily_invite_limit:
            tomorrow = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
            return tomorrow
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç - –∂–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
        if account.hourly_invites_used >= account.hourly_invite_limit:
            next_hour = datetime.utcnow().replace(minute=0, second=0, microsecond=0) + timedelta(hours=1)
            return next_hour
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —á–µ—Ä–µ–∑ —á–∞—Å
        return datetime.utcnow() + timedelta(hours=1) 