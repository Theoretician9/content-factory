"""
–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ Account Manager
–ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã Integration Service —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó Account Manager
"""
import logging
from datetime import datetime
from typing import Dict, Any, Optional
from sqlalchemy.orm import Session

from app.models import InviteTarget, TargetStatus
from app.adapters.base import InviteResult, InviteResultStatus
from app.clients.account_manager_client import AccountManagerClient

logger = logging.getLogger(__name__)


def _map_error_type_for_am(message: str) -> Optional[str]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞/–∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã–π enum Account Manager.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∏ —Ä–µ–ø–æ—Ä—Ç–∏—Ç—å –≤ AM –Ω–µ –Ω—É–∂–Ω–æ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 422).
    """
    if not message:
        return None
    m = str(message).lower()
    if "flood wait" in m or "flood_wait" in m:
        return "flood_wait"
    if "peer flood" in m or "peer_flood" in m:
        return "peer_flood"
    if "deactivated" in m or "inputuserdeactivated" in m:
        return "deactivated"
    if "auth" in m and "key" in m:
        return "auth_key"
    if "blocked" in m or "ban" in m:
        return "blocked"
    if "in_progress" in m or "in progress" in m:
        # –≠—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ –¥–ª—è AM ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–ø–æ—Ä—Ç–∏–Ω–≥, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å 422 –ø–æ enum
        return None
    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø ‚Äî –ª—É—á—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 422
    return None

async def _send_single_invite_via_account_manager(
    task,
    target: InviteTarget,
    account_allocation: Dict[str, Any],
    account_manager: AccountManagerClient,
    adapter,
    db: Session
) -> InviteResult:
    """
    ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ Account Manager
    –ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã Integration Service —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó Account Manager
    """
    start_time = datetime.utcnow()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –≤—ã–¥–µ–ª–µ–Ω–∏—è Account Manager (–ø–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
        account_data = account_allocation
        account_id = account_data['account_id']
        
        logger.info(f"üîÑ AccountManager: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —Ü–µ–ª–∏ {target.id} —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç {account_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ü–µ–ª–∏ –Ω–∞ IN_PROGRESS
        target.status = TargetStatus.IN_PROGRESS
        target.attempt_count += 1
        target.updated_at = datetime.utcnow()
        db.commit()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è –∞–¥–∞–ø—Ç–µ—Ä–∞
        target_data = {}
        if target.username:
            target_data['username'] = target.username
        if target.phone_number:
            target_data['phone_number'] = target.phone_number
        if target.user_id_platform:
            target_data['user_id_platform'] = target.user_id_platform
            
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        invite_data = {
            'group_id': task.settings.get('group_id') if task.settings else None,
            'message': task.settings.get('message') if task.settings else None
        }
        
        logger.info(f"üîç AccountManager: –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è - target: {target_data}, invite: {invite_data}")
        
        # ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ Account Manager –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞
        # Account Manager —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª –ª–∏–º–∏—Ç—ã, —Å—Ç–∞—Ç—É—Å, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        account_for_adapter = type('Account', (), {
            'account_id': account_id,
            'username': account_data.get('username'),
            'phone': account_data.get('phone'),
            'session_string': account_data.get('session_string'),
            'api_id': account_data.get('api_id'),
            'api_hash': account_data.get('api_hash')
        })()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –æ—Ç Account Manager
        result = await adapter.send_invite(account_for_adapter, target_data, invite_data)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.is_success:
            logger.info(f"‚úÖ AccountManager: –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —Ü–µ–ª–∏ {target.id} —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç {account_id}")
            target.status = TargetStatus.COMPLETED
            target.completed_at = datetime.utcnow()
            target.error_message = None
        else:
            # –ú—è–≥–∫–∏–µ –æ—Ç–∫–∞–∑—ã (–≤ —Ç.—á. IN_PROGRESS –∏–∑ Integration Service) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ä–µ—Ç—Ä–∞–π, –Ω–µ –ø–æ–º–µ—á–∞—è —Ü–µ–ª—å FAILED
            msg_lower = (result.error_message or "").lower()
            in_progress = (result.error_code == "in_progress") or ("in_progress" in msg_lower) or ("in progress" in msg_lower)
            if result.status == InviteResultStatus.RATE_LIMITED and in_progress:
                logger.info(f"‚è≥ AccountManager: –û–ø–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–ª—è —Ü–µ–ª–∏ {target.id} (in_progress). –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä")
                target.status = TargetStatus.PENDING
                target.error_message = "in_progress"
                # –ù–∏—á–µ–≥–æ –Ω–µ —Ä–µ–ø–æ—Ä—Ç–∏–º –≤ AM, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            else:
                logger.warning(f"‚ö†Ô∏è AccountManager: –ù–µ—É–¥–∞—á–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —Ü–µ–ª–∏ {target.id}: {result.error_message}")
                target.status = TargetStatus.FAILED
                target.error_message = result.error_message
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º Account Manager –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ª–∏–º–∏—Ç–æ–≤/–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            # –†–µ–ø–æ—Ä—Ç–∏–º –≤ AM —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ in_progress –∏ —Ç–∏–ø –∏–∑–≤–µ—Å—Ç–µ–Ω
            if not (result.status == InviteResultStatus.RATE_LIMITED and in_progress):
                am_error_type = _map_error_type_for_am(result.error_message)
                if am_error_type:
                    await account_manager.handle_error(
                        account_id=account_id,
                        error_type=am_error_type,
                        error_message=str(result.error_message),
                        context={
                            'target_id': target.id,
                            'task_id': task.id,
                            'action': 'invite'
                        }
                    )
                else:
                    logger.info("‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º handle_error –≤ AM: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π/–Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è enum (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ 422)")
        
        target.updated_at = datetime.utcnow()
        
        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            db.commit()
        except Exception as db_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –¥–ª—è —Ü–µ–ª–∏ {target.id}: {str(db_error)}")
            db.rollback()
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∫–æ–º–º–∏—Ç–∞
            try:
                target.updated_at = datetime.utcnow()
                db.commit()
            except Exception as retry_error:
                logger.error(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –¥–ª—è —Ü–µ–ª–∏ {target.id}: {str(retry_error)}")
                db.rollback()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        result.execution_time = (datetime.utcnow() - start_time).total_seconds()
        result.account_id = account_id
        
        return result
        
    except Exception as e:
        e_str = str(e)
        e_low = e_str.lower()
        # –ú—è–≥–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ IN_PROGRESS –∏–∑ Integration Service, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ –∫–∞–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        if "in_progress" in e_low or "in progress" in e_low:
            logger.info(f"‚è≥ AccountManager: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ IN_PROGRESS –¥–ª—è —Ü–µ–ª–∏ {target.id} ‚Äî —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ –º—è–≥–∫–∏–π —Ä–µ—Ç—Ä–∞–π")
            target.status = TargetStatus.PENDING
            target.error_message = "in_progress"
            target.updated_at = datetime.utcnow()
            try:
                db.commit()
            except Exception as db_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (in_progress) –≤ –ë–î –¥–ª—è —Ü–µ–ª–∏ {target.id}: {str(db_error)}")
                db.rollback()
            # –ù–µ —Ä–µ–ø–æ—Ä—Ç–∏–º –≤ AM
            return InviteResult(
                status=InviteResultStatus.RATE_LIMITED,
                error_message="Operation in progress",
                error_code="in_progress",
                account_id=account_allocation['account_id'] if account_allocation else None,
                execution_time=(datetime.utcnow() - start_time).total_seconds(),
                can_retry=True
            )

        logger.error(f"‚ùå AccountManager: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —Ü–µ–ª–∏ {target.id}: {e_str}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—É—é
        target.status = TargetStatus.FAILED
        target.error_message = e_str
        target.updated_at = datetime.utcnow()
        
        try:
            db.commit()
        except Exception as db_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –≤ –ë–î –¥–ª—è —Ü–µ–ª–∏ {target.id}: {str(db_error)}")
            db.rollback()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º Account Manager –æ–± –æ—à–∏–±–∫–µ
        if account_allocation:
            try:
                am_error_type = _map_error_type_for_am(e_str) or ("blocked" if "blocked" in e_low else None)
                if am_error_type:
                    await account_manager.handle_error(
                        account_id=account_allocation['account_id'],
                        error_type=am_error_type,
                        error_message=e_str,
                        context={
                            'target_id': target.id,
                            'task_id': task.id,
                            'action': 'invite',
                            'error': 'exception_during_invite'
                        }
                    )
                else:
                    logger.info("‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º handle_error –≤ AM –¥–ª—è exception: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ 422)")
            except Exception as error_report_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ Account Manager –æ–± –æ—à–∏–±–∫–µ: {str(error_report_error)}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
        return InviteResult(
            status=InviteResultStatus.FAILED,
            error_message=e_str,
            account_id=account_allocation['account_id'] if account_allocation else None,
            execution_time=(datetime.utcnow() - start_time).total_seconds(),
            can_retry=_is_retryable_single_error(e)
        )


def _is_retryable_single_error(error) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø—Ä–∏ –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ
    """
    error_str = str(error).lower()
    
    # –û—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
    retryable_errors = [
        'timeout',
        'connection',
        'network',
        'temporary',
        'rate limit',
        'flood wait'
    ]
    
    # –û—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
    non_retryable_errors = [
        'peer flood',
        'user not found',
        'no user has username',
        'invalid user',
        'banned',
        'restricted'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–ø–æ–≤—Ç–æ—Ä—è–µ–º—ã–µ –æ—à–∏–±–∫–∏
    for non_retryable in non_retryable_errors:
        if non_retryable in error_str:
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è–µ–º—ã–µ –æ—à–∏–±–∫–∏
    for retryable in retryable_errors:
        if retryable in error_str:
            return True
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ–π
    return True
