#!/usr/bin/env python3
"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
"""

import jwt
import logging
from typing import Optional, Dict, Any
from datetime import datetime

logger = logging.getLogger(__name__)

class SharedAuthService:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å–µ–º–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.
    """
    
    def __init__(self, jwt_secret: str = "super-secret-jwt-key-for-content-factory-2024"):
        self.jwt_secret = jwt_secret
        self.algorithm = "HS256"
    
    def validate_token(self, token: str) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç payload.
        """
        try:
            if not token:
                logger.warning("üö´ Empty token provided")
                return None
            
            # –£–±–∏—Ä–∞–µ–º 'Bearer ' –µ—Å–ª–∏ –µ—Å—Ç—å
            if token.startswith('Bearer '):
                token = token[7:]
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            payload = jwt.decode(token, self.jwt_secret, algorithms=[self.algorithm])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            user_id = payload.get('sub')
            exp = payload.get('exp')
            
            if not user_id:
                logger.warning("üö´ Token missing user ID")
                return None
            
            if exp and exp < datetime.utcnow().timestamp():
                logger.warning("üö´ Token expired")
                return None
            
            logger.info(f"‚úÖ Token validated for user_id: {user_id}")
            return payload
            
        except jwt.ExpiredSignatureError:
            logger.warning("üö´ Token expired")
            return None
        except jwt.InvalidTokenError as e:
            logger.warning(f"üö´ Invalid token: {e}")
            return None
        except Exception as e:
            logger.error(f"üö´ Token validation error: {e}")
            return None
    
    def get_user_id_from_token(self, token: str) -> Optional[int]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞.
        """
        payload = self.validate_token(token)
        if not payload:
            return None
        
        try:
            user_id = int(payload.get('sub'))
            return user_id
        except (ValueError, TypeError):
            logger.warning("üö´ Invalid user_id format in token")
            return None
    
    def create_user_filter(self, user_id: int) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö SQL –∑–∞–ø—Ä–æ—Å–∞—Ö.
        """
        return {"user_id": user_id}
    
    def check_user_access(self, token: str, resource_user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —Ä–µ—Å—É—Ä—Å—É.
        """
        token_user_id = self.get_user_id_from_token(token)
        if not token_user_id:
            return False
        
        access_granted = token_user_id == resource_user_id
        logger.info(f"üîí Access check: token_user={token_user_id}, resource_user={resource_user_id}, granted={access_granted}")
        return access_granted

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
auth_service = SharedAuthService()

def get_auth_service() -> SharedAuthService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    return auth_service

# –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å FastAPI
def extract_user_id_from_request_headers(headers: Dict[str, str]) -> Optional[int]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    auth_header = headers.get('authorization') or headers.get('Authorization')
    if not auth_header:
        logger.warning("üö´ No Authorization header found")
        return None
    
    return auth_service.get_user_id_from_token(auth_header)

def ensure_user_isolation_in_query(user_id: int, base_filters: Dict[str, Any] = None) -> Dict[str, Any]:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –∑–∞–ø—Ä–æ—Å–∞.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î.
    """
    filters = base_filters or {}
    filters.update(auth_service.create_user_filter(user_id))
    return filters

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤:
"""
1. PARSING SERVICE - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É user_id –¥–ª—è –≤—Å–µ—Ö Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤
2. MAILING SERVICE - —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ user_id 
3. BILLING SERVICE - –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã –∫ user_id
4. CONTENT SERVICE - –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
5. FUNNEL SERVICE - –≤–æ—Ä–æ–Ω–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ª—é–±–æ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–µ:

```python
from shared_auth_service import extract_user_id_from_request_headers, ensure_user_isolation_in_query

@app.get("/api/my-resource")
async def get_user_resources(request: Request):
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞
    user_id = extract_user_id_from_request_headers(dict(request.headers))
    if not user_id:
        raise HTTPException(status_code=401, detail="Authentication required")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∑–∞–ø—Ä–æ—Å—É
    filters = ensure_user_isolation_in_query(user_id, {"active": True})
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏–∑–æ–ª—è—Ü–∏–µ–π
    resources = await db.query(MyResource).filter_by(**filters).all()
    return resources
```
""" 