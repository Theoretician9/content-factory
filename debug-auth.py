#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Integration Service
"""

import requests
import jwt
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE = "http://92.113.146.148:8000"
JWT_SECRET = "super-secret-jwt-key-for-content-factory-2024"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ docker-compose

def create_test_token(user_id: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω"""
    payload = {
        "sub": str(user_id),
        "exp": datetime.utcnow() + timedelta(hours=1)
    }
    return jwt.encode(payload, JWT_SECRET, algorithm="HS256")

def test_auth():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Integration Service"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user1_token = create_test_token(1)
    user2_token = create_test_token(999)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–æ—á–Ω–æ –Ω–µ—Ç
    
    print(f"User 1 token: {user1_token[:50]}...")
    print(f"User 999 token: {user2_token[:50]}...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
    headers1 = {"Authorization": f"Bearer {user1_token}"}
    headers2 = {"Authorization": f"Bearer {user2_token}"}
    
    print(f"\nüìã –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Ç user_id=1")
    try:
        response1 = requests.get(f"{API_BASE}/api/integrations/telegram/accounts", headers=headers1)
        print(f"Status: {response1.status_code}")
        if response1.status_code == 200:
            accounts1 = response1.json()
            print(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts1)}")
            for acc in accounts1:
                print(f"  - Account {acc['id'][:8]}..., user_id: {acc['user_id']}, phone: {acc['phone']}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response1.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\nüìã –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Ç user_id=999")
    try:
        response2 = requests.get(f"{API_BASE}/api/integrations/telegram/accounts", headers=headers2)
        print(f"Status: {response2.status_code}")
        if response2.status_code == 200:
            accounts2 = response2.json()
            print(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts2)}")
            for acc in accounts2:
                print(f"  - Account {acc['id'][:8]}..., user_id: {acc['user_id']}, phone: {acc['phone']}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response2.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    print(f"\nüö´ –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞")
    try:
        response3 = requests.get(f"{API_BASE}/api/integrations/telegram/accounts")
        print(f"Status: {response3.status_code}")
        print(f"Response: {response3.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_auth()
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!") 