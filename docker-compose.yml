version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: ./backend/api-gateway
    ports:
      - "8000:8000"
    environment:
      - USER_SERVICE_URL=http://user-service:8000
      - BILLING_SERVICE_URL=http://billing-service:8000
      - SCENARIO_SERVICE_URL=http://scenario-service:8000
      - CONTENT_SERVICE_URL=http://content-service:8000
      - INVITE_SERVICE_URL=http://invite-service:8000
      - PARSING_SERVICE_URL=http://parsing-service:8000
      - INTEGRATION_SERVICE_URL=http://integration-service:8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-super-secret-jwt-key-for-content-factory-2024}
    depends_on:
      - user-service
      - billing-service
      - scenario-service
      - content-service
      - invite-service
      - parsing-service
      - integration-service
      - redis
      - mysql
    networks:
      - backend

  # User Service
  user-service:
    build: ./backend/user-service
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=telegraminvi
      - MYSQL_PASSWORD=szkTgBhWh6XU
      - MYSQL_DATABASE=user_service
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mysql
      - redis
    networks:
      - backend

  # Billing Service
  billing-service:
    build: ./backend/billing-service
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=billing_service
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mysql
      - redis
    networks:
      - backend

  # Scenario Service
  scenario-service:
    build: ./backend/scenario-service
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=scenario_service
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mysql
      - redis
    networks:
      - backend

  # Content Service
  content-service:
    build: ./backend/content-service
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=content_service
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mysql
      - redis
    networks:
      - backend

  # Invite Service
  invite-service:
    build: ./backend/invite-service
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=invite_service
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mysql
      - redis
    networks:
      - backend

  # Parsing Service
  parsing-service:
    build: ./backend/parsing-service
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=parsing_service
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mysql
      - redis
    networks:
      - backend

  # Integration Service
  integration-service:
    build: ./backend/integration-service
    ports:
      - "127.0.0.1:8001:8000"
    environment:
      - POSTGRES_HOST=integration-postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=integration_user
      - POSTGRES_PASSWORD=integration_password
      - POSTGRES_DATABASE=integration_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - VAULT_ADDR=http://vault:8201
      - VAULT_TOKEN=${VAULT_ROOT_TOKEN}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=user
      - RABBITMQ_PASSWORD=password
      - TELEGRAM_API_ID=23699038
      - TELEGRAM_API_HASH=055c48aee9080db331639a87f85617b4
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-super-secret-jwt-key-for-content-factory-2024}
      - LOG_LEVEL=INFO
      - DEBUG=false
      - PYTHONPATH=/app
    depends_on:
      - integration-postgres
      - redis
      - vault
      - rabbitmq
    networks:
      - backend
      - app-network
    restart: unless-stopped

  # PostgreSQL для Integration Service  
  integration-postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=integration_user
      - POSTGRES_PASSWORD=integration_password
      - POSTGRES_DB=integration_db
    ports:
      - "127.0.0.1:5433:5432"
    volumes:
      - integration_postgres_data:/var/lib/postgresql/data
      - ./backend/integration-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U integration_user -d integration_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Task Worker
  task-worker:
    build: ./backend/task-worker
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=task_worker
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=user
      - RABBITMQ_PASSWORD=password
    volumes:
      - ./backend/task-worker:/app
    depends_on:
      - mysql
      - redis
      - rabbitmq
    networks:
      - app-network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.12-management
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    ports:
      - "5672:5672"   # AMQP protocol port
      - "127.0.0.1:15672:15672" # Management UI
      - "15692:15692" # Prometheus metrics
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # RabbitMQ Exporter
  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter
    environment:
      - RABBIT_URL=http://rabbitmq:15672
      - RABBIT_USER=user
      - RABBIT_PASSWORD=password
    ports:
      - "9419:9419"
    depends_on:
      - rabbitmq
    networks:
      - app-network
      - backend

  # Redis
  redis:
    image: redis:7.0
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter
    command: --redis.addr=redis://redis:6379
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - backend

  # MySQL
  mysql:
    image: mysql:8.0
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=Lfnm97HnPug8
      - MYSQL_USER=telegraminvi
      - MYSQL_PASSWORD=szkTgBhWh6XU
      - MYSQL_DATABASE=telegraminvi
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - backend

  # MySQL Exporter
  mysql-exporter:
    image: prom/mysqld-exporter:v0.14.0
    environment:
      - DATA_SOURCE_NAME=telegraminvi:szkTgBhWh6XU@(mysql:3306)/telegraminvi
    ports:
      - "9104:9104"
    depends_on:
      - mysql
    networks:
      - backend

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.listen-address=0.0.0.0:9090'
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - backend
      - app-network

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:v0.26.0
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ./alertmanager/templates:/etc/alertmanager/templates
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.listen-address=0.0.0.0:9093'
    ports:
      - "127.0.0.1:9093:9093"
    networks:
      - backend

  # Grafana
  grafana:
    image: grafana/grafana:10.0.0
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_HTTP_ADDR=0.0.0.0
      - GF_SERVER_HTTP_PORT=3000
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - backend

  # ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=changeme
      - network.host=0.0.0.0
      - http.host=0.0.0.0
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "127.0.0.1:9200:9200"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=changeme
      - SERVER_HOST=0.0.0.0
      - SERVER_NAME=kibana
      - XPACK_SECURITY_ENABLED=true
    ports:
      - "127.0.0.1:5601:5601"
    networks:
      - backend
    depends_on:
      elasticsearch:
        condition: service_healthy

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - /var/www/html/logs/services:/usr/share/logstash/logs/services
      - /var/www/html/logs/api-gateway:/usr/share/logstash/logs/api-gateway
      - logstash_logs:/usr/share/logstash/logs
    ports:
      - "127.0.0.1:9600:9600"
      - "5000:5000"
      - "5044:5044"
    networks:
      - backend
    environment:
      - ELASTICSEARCH_HOSTS=http://92.113.146.148:9200
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 5

  vault:
    image: vault:1.13.3
    container_name: vault
    environment:
      - VAULT_LOG_LEVEL=info
      - VAULT_ADDR=http://0.0.0.0:8201
      - VAULT_LOCAL_CONFIG={"storage":{"file":{"path":"/vault/data"}},"listener":{"tcp":{"address":"0.0.0.0:8201","tls_disable":true}},"ui":true,"default_lease_ttl":"168h","max_lease_ttl":"720h"}
    cap_add:
      - IPC_LOCK
    ports:
      - "127.0.0.1:8201:8201"
    networks:
      - backend
    volumes:
      - vault_data:/vault/data
      - ./vault/config:/vault/config
    entrypoint: >
      sh -c "
        chown -R vault:vault /vault/data &&
        exec docker-entrypoint.sh vault server -config=/vault/config/vault.hcl
      "
    healthcheck:
      test: ["CMD", "sh", "-c", "VAULT_ADDR=http://127.0.0.1:8201 vault status || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "com.docker.compose.service=vault"
      - "com.docker.compose.project=content-factory"

  nginx:
    image: nginx:1.25
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
      - ./frontend-static:/usr/share/nginx/html:ro
    depends_on:
      - api-gateway
    ports:
      - "80:80"
      - "443:443"
    networks:
      - backend
      - frontend-network

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt

volumes:
  rabbitmq_data:
  redis_data:
  mysql_data:
  elasticsearch_data:
  vault_data:
  logstash_logs:
    driver: local
  frontend-static:
  integration_postgres_data:

networks:
  app-network:
    driver: bridge
  backend:
    driver: bridge
  frontend-network:
    driver: bridge

 